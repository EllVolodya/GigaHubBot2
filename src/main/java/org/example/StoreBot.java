package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.methods.send.SendVideo;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.io.InputStream;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.*;
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;

public class StoreBot extends TelegramLongPollingBot {

    private final String botUsername = "GigaHubAssistant_bot";

    // üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —Å—Ç–∞–Ω–∏
    private final Map<Long, String> currentCategory = new HashMap<>();
    private final Map<Long, String> currentSubcategory = new HashMap<>();
    private final Map<Long, Integer> productIndex = new HashMap<>();
    private final Map<Long, List<Map<String, Object>>> userCart = new HashMap<>();

    //–ü—Ä–∞–≤–∞
    private final List<Long> ADMINS = List.of(620298889L, 533570832L,1030917576L);
    private final List<Long> DEVELOPERS = List.of(620298889L, 533570832L,1030917576L); // —Ç—É—Ç –∞–π–¥—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤

    // üîπ –ê–¥–º—ñ–Ω—Å—å–∫—ñ —Å—Ç–∞–Ω–∏
    private Map<Long, Long> adminReplyTarget = new HashMap<>();

    private final Map<Long, String> adminEditingProduct = new HashMap<>();
    private final Map<Long, String> adminEditingField = new HashMap<>();
    private final Map<Long, List<String>> adminMatchList = new HashMap<>();
    private final Map<Long, String> adminNewCategory = new HashMap<>();
    private final Map<Long, String> userStates = new HashMap<>();
    private final List<String> hitItems = new ArrayList<>();
    private final Map<Long, List<String>> supportAnswers = new HashMap<>();
    private final Map<Long, List<Map<String, Object>>> userOrders = new HashMap<>();
    private final Map<Long, Map<String, Object>> lastShownProduct = new HashMap<>();
    private final Map<Long, Integer> adminOrderIndex = new HashMap<>();
    private final Map<String, Object> tempStorage = new HashMap<>();

    private final CatalogSearcher catalogSearcher = new CatalogSearcher();
    private final Map<Long, List<Map<String, Object>>> searchResults = new HashMap<>();

    private final Map<Long, List<String>> feedbacks = new HashMap<>();
    private final Map<Long, Long> replyTargets = new HashMap<>();

    public StoreBot(String botToken) {
        super(botToken);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) return;

        Long userId = update.getMessage().getFrom().getId();
        String chatId = update.getMessage().getChatId().toString();
        String state = userStates.get(userId);
        String text = update.getMessage().hasText() ? update.getMessage().getText().trim() : null;

        if ("awaiting_photo".equals(state)) {
            if (update.getMessage().hasPhoto()) {
                List<PhotoSize> photos = update.getMessage().getPhoto();
                System.out.println("[PHOTO] –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥ userId=" + userId + ", –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—ñ–≤: " + photos.size());
                handleAwaitingPhoto(userId, chatId, photos);
            } else {
                sendText(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.");
            }
            return;
        }

        // üîπ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ ‚Äì –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ handleState
        if (state != null) {
            try {
                handleFeedbackState(userId, chatId, text, state);
                handleState(userId, chatId, text, state, update);
            } catch (TelegramApiException e) {
                e.printStackTrace();
                sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.");
            }
            return;
        }

        try {
            // üîπ –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (state != null) {
                switch (state) {
                    case "awaiting_pickup_data" -> {
                        List<Map<String, Object>> cart = userCart.get(userId);
                        if (cart == null || cart.isEmpty()) {
                            sendText(chatId, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                            userStates.remove(userId);
                            return;
                        }

                        String orderCode = String.format("%04d", new Random().nextInt(10000));
                        Map<String, Object> orderData = new HashMap<>();
                        orderData.put("orderCode", orderCode);
                        orderData.put("pickupData", text);
                        orderData.put("items", new ArrayList<>(cart));
                        double total = cart.stream()
                                .mapToDouble(i -> Double.parseDouble(i.getOrDefault("price","0").toString()))
                                .sum();
                        orderData.put("total", total);
                        orderData.put("status", "–ù–æ–≤–µ");
                        orderData.put("date", LocalDateTime.now().toString());
                        orderData.put("type", "pickup");

                        userOrders.computeIfAbsent(userId, k -> new ArrayList<>()).add(orderData);
                        OrderFileManager.addOrder(orderData);

                        // üîπ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                        for (Long adminId : ADMINS) {
                            StringBuilder sb = new StringBuilder();
                            sb.append("üè¨ *–°–∞–º–æ–≤–∏–≤—ñ–∑*\n");
                            sb.append("üÜî User ID: ").append(userId).append("\n");
                            sb.append("üî¢ –ö–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ").append(orderCode).append("\n");
                            sb.append("üìã –î–∞–Ω—ñ:\n").append(text).append("\n\n");
                            for (Map<String,Object> item : cart) {
                                sb.append("‚Ä¢ ").append(item.get("title")).append(" ‚Äî ").append(item.get("price")).append(" –≥—Ä–Ω\n");
                            }
                            sb.append("\nüí∞ –í—Å—å–æ–≥–æ: ").append(total).append(" –≥—Ä–Ω");
                            sendText(adminId.toString(), sb.toString());
                        }

                        userCart.remove(userId);
                        userStates.remove(userId);
                        sendText(chatId, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–º–æ–≤–∏–≤—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n–ö–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " + orderCode);
                    }

                    case "awaiting_manufacturer" -> {
                        // 1Ô∏è‚É£ –ë–µ—Ä–µ–º–æ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∑ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
                        String productName = (String) tempStorage.get(userId + "_editingProduct");
                        if (productName == null) {
                            sendText(chatId, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
                            userStates.put(userId, "admin_menu");
                            return;
                        }

                        // 2Ô∏è‚É£ –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ CatalogEditor
                        String input = text.trim();
                        try {
                            CatalogEditor.updateProductManufacturer(productName, input);
                            if (input.equalsIgnoreCase("‚ùå") || input.isEmpty()) {
                                sendText(chatId, "‚úÖ –í–∏—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É: " + productName);
                            } else {
                                sendText(chatId, "‚úÖ –í–∏—Ä–æ–±–Ω–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: " + input);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            sendText(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ catalog.yml: " + e.getMessage());
                        }

                        // 3Ô∏è‚É£ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
                        sendText(chatId, createEditMenu(chatId, productName).getText());
                        userStates.put(userId, "edit_product");
                    }
                }
            }

            // üîπ –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ (–∫–Ω–æ–ø–∫–∏)
            if (text == null) return;

            switch (text) {
                case "/start" -> {
                    clearUserState(userId);

                    // –û—Ç—Ä–∏–º—É—î–º–æ chatId —è–∫ Long
                    Long chatIdLong = update.getMessage().getChatId();
                    String chatIdStr = chatIdLong.toString(); // –¥–ª—è createUserMenu, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω String

                    String inviteCode = null;

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–∞—Ä–∞–º–µ—Ç—Ä invite –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É
                    if (text != null && text.contains(" ")) {
                        String[] parts = text.split(" ");
                        if (parts.length > 1 && !parts[1].isBlank()) { // –¥—Ä—É–≥–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ—Å–Ω—É—î —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
                            inviteCode = parts[1].trim();

                            // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ number –¥–ª—è —Ü—å–æ–≥–æ invite
                            if (InviteManager.incrementInviteNumber(inviteCode)) {
                                System.out.println("‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫ number –¥–ª—è invite " + inviteCode + " –∑–±—ñ–ª—å—à–µ–Ω–æ.");
                            } else {
                                System.out.println("‚ùå Invite –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + inviteCode);
                            }
                        }
                    }

                    // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É REGISTERED_USERS
                    UserManager userManager = new UserManager();
                    userManager.registerUser(chatIdLong); // –ø–µ—Ä–µ–¥–∞—î–º–æ Long

                    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    sendMessage(createUserMenu(chatIdStr, userId));

                    System.out.println("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ /start: " + chatIdLong +
                            (inviteCode != null ? " (Invite: " + inviteCode + ")" : ""));
                }

                case "üß± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤" -> sendCategories(userId);
                case "üìã –ö–æ—à–∏–∫" -> {
                    try {
                        showCart(userId);  // userId ‚Äî Long
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                }
                case "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—à–∏–∫" -> {
                    try {
                        showCart(userId);  // userId ‚Äî Long
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                }
                case "üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫" -> clearCart(userId);
                case "‚¨Ö –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" -> {
                    clearUserState(userId);
                    sendMessage(createUserMenu(chatId, userId));
                }
                case "‚û° –î–∞–ª—ñ" -> showNextProduct(userId);
                case "üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫" -> addToCart(userId);
                case "üìç –ê–¥—Ä–µ—Å–∏ —Ç–∞ –ö–æ–Ω—Ç–∞–∫—Ç–∏" -> {
                    SendMessage message = new SendMessage();
                    message.setChatId(chatId);
                    message.setParseMode("HTML");
                    message.setDisableWebPagePreview(true); // ‚¨Ö –≤–∏–º–∏–∫–∞—î –ø—Ä–µ–≤‚Äô—é
                    message.setText(
                            "üèòÔ∏è –ö–∞–∑–∞–Ω–∫–∞: <a href=\"https://maps.app.goo.gl/d7GQnKaXedkHDuq97\">–Ω–∞ –º–∞–ø—ñ</a>\n" +
                                    "üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>(050) 457 84 58</code>\n\n" +
                                    "üèòÔ∏è –ù–æ–≤–∏–π –ë—É–≥: <a href=\"https://maps.app.goo.gl/YJ5qzxAqXVpZJXYPA\">–Ω–∞ –º–∞–ø—ñ</a>\n" +
                                    "üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>(050) 493 15 15</code>"
                    );
                    execute(message);
                }

                case "üåê –°–æ—Ü-–º–µ—Ä–µ–∂—ñ" -> {
                    SendMessage message = new SendMessage();
                    message.setChatId(chatId);
                    message.setParseMode("HTML");
                    message.setDisableWebPagePreview(true); // ‚¨Ö –≤–∏–º–∏–∫–∞—î –ø—Ä–µ–≤‚Äô—é
                    message.setText(
                            "üåê –ú–∏ —É —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂–∞—Ö:\n\n" +
                                    "üìò Facebook: <a href=\"https://www.facebook.com/p/%D0%93%D0%B8%D0%B3%D0%B0%D1%85%D0%B0%D0%B1-61578183892871/\">–≤—ñ–¥–∫—Ä–∏—Ç–∏</a>\n" +
                                    "üì∏ Instagram: <a href=\"https://www.instagram.com/_gigahub_?igsh=Y211bWRqazhhcmtu&utm_source=qr\">–≤—ñ–¥–∫—Ä–∏—Ç–∏</a>\n" +
                                    "üéµ TikTok: <a href=\"tiktok.com/@gigahub2\">–≤—ñ–¥–∫—Ä–∏—Ç–∏</a>\n\n" +
                                    "‚òï –¢–∞–∫–æ–∂ Instagram –¥–æ—Å—Ç—É–ø–Ω–∏–π —É CoffeeMax: <a href=\"https://www.instagram.com/coffee_max_1?igsh=bmhsNDRyN2M5eG5l&utm_source=qr\">–≤—ñ–¥–∫—Ä–∏—Ç–∏</a>"
                    );
                    execute(message);
                }
                case "üí¨ –î–æ–ø–æ–º–æ–≥–∞" -> sendMessage(createHelpMenu(chatId));
                case "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É" -> {
                    userStates.put(userId, "ask_consultant");
                    sendText(chatId, "‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É:");
                }
                case "üíå –í—ñ–¥–ø–æ–≤—ñ–¥—ñ" -> {
                    List<String> answers = supportAnswers.get(userId);
                    String reply = (answers == null || answers.isEmpty())
                            ? "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ñ–≤."
                            : "üíå –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ñ–≤:\n\n" + String.join("\n\n", answers);
                    sendText(chatId, reply);
                }

                case "üîç –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É" -> {
                    userStates.put(userId, "waiting_for_search");
                    sendText(chatId, "üîé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏:");
                    System.out.println("üü¢ User " + userId + " –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ —Å—Ç–∞–Ω waiting_for_search");
                    return;
                }

                case "üõí –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä" -> {
                    List<Map<String, Object>> cart = userCart.get(userId);
                    if (cart == null || cart.isEmpty()) {
                        sendText(chatId, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                        return;
                    }

                    ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
                    markup.setResizeKeyboard(true);

                    KeyboardRow deliveryRow = new KeyboardRow();
                    deliveryRow.add(new KeyboardButton("üè¨ –°–∞–º–æ–≤–∏–≤—ñ–∑"));
                    deliveryRow.add(new KeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É"));
                    deliveryRow.add(new KeyboardButton("üìÆ –î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é"));

                    KeyboardRow backRow = new KeyboardRow();
                    backRow.add(new KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));

                    markup.setKeyboard(List.of(deliveryRow, backRow));

                    sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", markup);
                    userStates.put(userId, "awaiting_delivery_choice");
                }

                case "üè¨ –°–∞–º–æ–≤–∏–≤—ñ–∑" -> {
                    tempStorage.put(userId + "_deliveryType", "–°–∞–º–æ–≤–∏–≤—ñ–∑");
                    userStates.put(userId, "order_pickup");

                    sendText(chatId,
                            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                    "üèô –ú—ñ—Å—Ç–æ\nüë§ –ü.–Ü.\nüìû –¢–µ–ª–µ—Ñ–æ–Ω\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                    "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                    "–ö–∞–∑–∞–Ω–∫–∞, –°–∏–¥–æ—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –û–ª–µ–∫—Å—ñ—ó–≤–Ω–∞, +380631234567, 4444"
                    );
                }

                case "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É" -> {
                    tempStorage.put(userId + "_deliveryType", "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É");
                    userStates.put(userId, "awaiting_city_delivery");
                    sendText(chatId,
                            "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –º—ñ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                    "üìç –ê–¥—Ä–µ—Å–∞, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                    "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                    "–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 10, –ö–∞–∑–∞–Ω–∫–∞, –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á, +380671234567, 4444");
                }

                case "üìÆ –î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é" -> {
                    tempStorage.put(userId + "_deliveryType", "–ù–æ–≤–∞ –ü–æ—à—Ç–∞");
                    userStates.put(userId, "awaiting_post_delivery");
                    sendText(chatId,
                            "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                    "üìÆ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                    "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                    "‚Ññ12, –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á, +380501234567, 4444");
                }

                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞" -> {
                    showCart(userId); // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –∫–æ—à–∏–∫
                }

                case "üéØ –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É" -> {
                    List<Map<String, Object>> hits = HitsManager.loadHits();
                    if (hits.isEmpty()) {
                        sendText(chatId, "‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ö—ñ—Ç—ñ–≤ –ø—Ä–æ–¥–∞–∂—É.");
                        return;
                    }

                    for (Map<String, Object> hit : hits) {
                        String title = hit.get("title") != null ? hit.get("title").toString() : "";
                        String description = hit.get("description") != null ? hit.get("description").toString() : "";

                        // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        String textMsg = "";
                        if (!title.isEmpty()) textMsg += "‚≠ê *" + title + "*";
                        if (!description.isEmpty() && !"–Ω–µ–º–∞—î".equals(description)) {
                            if (!textMsg.isEmpty()) textMsg += "\n\n";
                            textMsg += description;
                        }

                        // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π —ñ —î –º–µ–¥—ñ–∞, –∑–∞–ª–∏—à–∞—î–º–æ caption –ø—É—Å—Ç–∏–º
                        Object mediaObj = hit.get("media");
                        String caption = textMsg;
                        if (caption.isEmpty() && mediaObj != null && !"–Ω–µ–º–∞—î".equals(mediaObj.toString())) {
                            caption = null; // –ø–æ—Ä–æ–∂–Ω—ñ–π –ø—ñ–¥–ø–∏—Å –¥–ª—è —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ
                        } else if (caption.isEmpty()) {
                            caption = "–Ω–µ–º–∞—î"; // –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –Ω–µ–º–∞—î —ñ –º–µ–¥—ñ–∞
                        }

                        if (mediaObj != null && !"–Ω–µ–º–∞—î".equals(mediaObj.toString())) {
                            String fileId = mediaObj.toString();
                            try {
                                if (fileId.startsWith("BAAC")) { // –≤—ñ–¥–µ–æ
                                    SendVideo video = SendVideo.builder()
                                            .chatId(chatId)
                                            .video(new InputFile(fileId))
                                            .caption(caption)
                                            .parseMode("Markdown")
                                            .build();
                                    execute(video);
                                } else { // —Ñ–æ—Ç–æ
                                    SendPhoto photo = SendPhoto.builder()
                                            .chatId(chatId)
                                            .photo(new InputFile(fileId))
                                            .caption(caption)
                                            .parseMode("Markdown")
                                            .build();
                                    execute(photo);
                                }
                            } catch (TelegramApiException e) {
                                e.printStackTrace();
                                sendText(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–¥—ñ–∞.");
                            }
                        } else {
                            sendText(chatId, caption);
                        }
                    }
                }

                // –ú–µ–Ω—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞
                case "üë®‚Äçüíª –ú–µ–Ω—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞" -> {
                    if (DEVELOPERS.contains(userId)) {
                        sendMessage(createDeveloperMenu(chatId));
                    } else {
                        sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                    }
                }

                case "üîó –ó–∞–ø—Ä–æ—à—É–≤–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" -> {
                    if (DEVELOPERS.contains(userId)) {
                        userStates.put(userId, "invites_menu");
                        sendMessage(createInvitesMenu(chatId));
                    } else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                }

                case "üìú –õ–æ–≥–∏—Ä—É–≤–∞–Ω–Ω—è" -> {
                    if (DEVELOPERS.contains(userId)) sendMessage(createLogsMenu(chatId));
                    else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                }

                case "üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–∏" -> {
                    if (DEVELOPERS.contains(userId)) {
                        List<String> updates = DeveloperFileManager.getChangelog();
                        if (updates.isEmpty()) sendText(chatId, "üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                        else sendText(chatId, "üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å:\n\n" + String.join("\n\n", updates));
                    } else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                }

                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à—É–≤–∞–Ω—å" -> {
                    userStates.put(userId, "logs_invites");
                    handleState(userId, chatId, text, "logs_invites", update);
                }

                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω—å" -> {
                    userStates.put(userId, "logs_no_invite");
                    handleState(userId, chatId, text, "logs_no_invite", update);
                }

                case "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è" -> {
                    userStates.put(userId, "logs_orders");
                    handleState(userId, chatId, text, "logs_orders", update);
                }

                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞" -> {
                    if (DEVELOPERS.contains(userId)) {
                        sendMessage(createDeveloperMenu(chatId));
                    } else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                }

                // –ê–¥–º—ñ–Ω –º–µ–Ω—é
                case "‚öôÔ∏è –ü—Ä–æ–¥–∞–≤—Ü–∞ –º–µ–Ω—é" -> {
                    if (ADMINS.contains(userId)) sendMessage(createAdminMenu(chatId));
                    else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                }
                case "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä" -> {
                    if (ADMINS.contains(userId)) {
                        userStates.put(userId, "edit_product");
                        sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:");
                    } else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.");
                }
                case "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó" -> {
                    if (ADMINS.contains(userId)) {
                        userStates.put(userId, "category_management");
                        sendMessage(createCategoryAdminMenu(chatId));
                    } else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.");
                }

                case "üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" -> {
                    try (Connection conn = DatabaseManager.getConnection()) {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ
                        String countSql = "SELECT COUNT(*) FROM orders";
                        try (PreparedStatement countStmt = conn.prepareStatement(countSql)) {
                            ResultSet countRs = countStmt.executeQuery();
                            if (countRs.next() && countRs.getInt(1) == 0) {
                                sendText(chatId, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.");
                                return;
                            }
                        }

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ –∞–¥–º—ñ–Ω –∑–∞—Ä–∞–∑ –¥–∏–≤–∏—Ç—å—Å—è –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        adminOrderIndex.put(userId, 0);

                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏
                        showAdminOrder(userId, chatId);

                    } catch (SQLException e) {
                        e.printStackTrace();
                        sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –±–∞–∑–∏.");
                    }
                }

                case "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" -> {
                    try (Connection conn = DatabaseManager.getConnection()) {
                        // –í–∏—Ç—è–≥–∞—î–º–æ –ø–µ—Ä—à–µ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        String selectSql = "SELECT * FROM orders WHERE status = '–ù–æ–≤–µ' ORDER BY id ASC LIMIT 1";
                        try (PreparedStatement stmt = conn.prepareStatement(selectSql);
                             ResultSet rs = stmt.executeQuery()) {

                            if (!rs.next()) {
                                sendText(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.");
                                break;
                            }

                            Long orderId = rs.getLong("id");
                            String orderCode = rs.getString("orderCode");
                            Long orderUserId = rs.getLong("userId");

                            sendText(orderUserId.toString(), "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.");

                            String updateSql = "UPDATE orders SET status = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' WHERE id = ?";
                            try (PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {
                                updateStmt.setLong(1, orderId);
                                updateStmt.executeUpdate();
                            }

                            sendText(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ");

                            // –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—É –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                            Long adminId = userId;
                            showAdminOrder(adminId, chatId);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
                    }
                }

                case "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏" -> {
                    userStates.put(userId, "reject_order_reason");
                    sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:");
                }

                case "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" -> {
                    try (Connection conn = DatabaseManager.getConnection()) {
                        // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        String selectSql = "SELECT * FROM orders WHERE status NOT IN ('–í–∏–¥–∞–ª–µ–Ω–æ', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ') ORDER BY id ASC LIMIT 1";
                        try (PreparedStatement stmt = conn.prepareStatement(selectSql);
                             ResultSet rs = stmt.executeQuery()) {

                            if (!rs.isBeforeFirst()) {
                                sendText(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.");
                                break;
                            }

                            if (rs.next()) {
                                String orderCode = rs.getString("orderCode");
                                Long orderUserId = rs.getLong("userId");

                                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í–∏–¥–∞–ª–µ–Ω–æ"
                                String updateSql = "UPDATE orders SET status = ?, comment = ? WHERE orderCode = ?";
                                try (PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {
                                    updateStmt.setString(1, "–í–∏–¥–∞–ª–µ–Ω–æ");
                                    updateStmt.setString(2, "–í–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
                                    updateStmt.setString(3, orderCode);
                                    updateStmt.executeUpdate();
                                }

                                // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                                sendText(orderUserId.toString(), "üóëÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");

                                // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É
                                sendText(chatId, "üóëÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.");

                                // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                                showAdminOrder(userId, chatId);
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
                    }
                }

                case "‚è≠Ô∏è –î–∞–ª—å—à–µ" -> {
                    int idx = adminOrderIndex.getOrDefault(userId, 0);
                    adminOrderIndex.put(userId, idx + 1); // –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
                    showAdminOrder(userId, chatId);
                }
                case "‚èÆÔ∏è –ù–∞–∑–∞–¥" -> {
                    int idx = adminOrderIndex.getOrDefault(userId, 0);
                    if (idx > 0) adminOrderIndex.put(userId, idx - 1); // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥
                    showAdminOrder(userId, chatId);
                }

                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–ü—Ä–æ–¥–∞–≤–µ—Ü—å)" -> {
                    // –û—á–∏—â–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å
                    adminOrderIndex.remove(userId);

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü—è
                    SendMessage menuMsg = createAdminMenu(chatId);
                    try {
                        execute(menuMsg); // <-- –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ execute
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                        sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü—è.");
                    }
                }

                case "‚û°Ô∏è –î–∞–ª—ñ" -> {
                    int idx = adminOrderIndex.getOrDefault(userId, 0);
                    idx++;
                    adminOrderIndex.put(userId, idx);
                    showAdminOrder(userId, chatId);
                }

                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é" -> {
                    sendMessage(createAdminMenu(chatId));
                }

                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" -> {
                    clearUserState(userId);
                    sendMessage(createUserMenu(chatId, userId));
                }

                case "‚≠ê –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É" -> {
                    if (!ADMINS.contains(userId)) {
                        sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                        break;
                    }
                    userStates.put(userId, "awaiting_hit_type"); // <-- —Ç—É—Ç —Ç—Ä–µ–±–∞ —Ç–∞–∫
                    sendText(chatId, "–í–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫—Ä–µ–∞—Ç–∏–≤ –∑ –æ–ø–∏—Å–æ–º —á–∏ —Ç—ñ–ª—å–∫–∏ –º–µ–¥—ñ–∞?\n–ù–∞–ø–∏—à—ñ—Ç—å '–ó –æ–ø–∏—Å–æ–º' –∞–±–æ '–¢—ñ–ª—å–∫–∏ –º–µ–¥—ñ–∞':");
                }

                case "üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫" -> {
                    userStates.put(userId, "waiting_for_feedback");
                    sendText(chatId, "üìù –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫, –º–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –π–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–Ω–µ–º–æ:");
                }

                case "üí¨ –í—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" -> {
                    if (DEVELOPERS.contains(userId)) {
                        Map<Long, List<String>> allReviews = FeedbackManager.getAllFeedbacks();
                        if (allReviews.isEmpty()) {
                            sendText(chatId, "‚ùå –í—ñ–¥–≥—É–∫—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.");
                        } else {
                            Long targetId = allReviews.keySet().iterator().next();
                            sendMessage(createFeedbackSubMenu(chatId, targetId));
                        }
                    } else sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                }

                case "‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—ñ–¥–≥—É–∫" -> {
                    userStates.put(userId, "writing_reply");
                    sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:");
                }

                case "üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–≥—É–∫" -> {
                    FeedbackManager.saveFeedbacks();
                    sendText(chatId, "üíæ –í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
                }

                case "üßπ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫" -> {
                    Long target = adminReplyTarget.get(userId);
                    if (target != null) {
                        FeedbackManager.removeLastFeedback(target);
                        sendText(chatId, "üßπ –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                    } else {
                        sendText(chatId, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É.");
                    }
                }

                default -> handleText(userId, text);
            }

            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –≤—ñ–¥–≥—É–∫
            if ("waiting_for_feedback".equals(state)) {
                FeedbackManager.addFeedback(userId, text);
                sendText(chatId, "‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!");
                userStates.remove(userId);
                return; // –≤–∏—Ö—ñ–¥ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞–Ω—É
            }

            if (text.contains("–°–∞–º–æ–≤–∏–≤—ñ–∑")) {
                System.out.println("DEBUG: –ù–∞—Ç–∏—Å–Ω—É–ª–∏ –°–∞–º–æ–≤–∏–≤—ñ–∑");
                userStates.put(userId, "order_pickup");
                tempStorage.put(userId + "_deliveryType", "–°–∞–º–æ–≤–∏–≤—ñ–∑");
                sendText(chatId,
                        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                "üèô –ú—ñ—Å—Ç–æ\nüë§ –ü.–Ü.\nüìû –¢–µ–ª–µ—Ñ–æ–Ω\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                "–ö–∞–∑–∞–Ω–∫–∞, –°–∏–¥–æ—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –û–ª–µ–∫—Å—ñ—ó–≤–Ω–∞, +380631234567, 4444"
                );
            } else if (text.contains("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É")) {
                System.out.println("DEBUG: –ù–∞—Ç–∏—Å–Ω—É–ª–∏ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É");
                userStates.put(userId, "awaiting_city_delivery");
                tempStorage.put(userId + "_deliveryType", "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É");
                sendText(chatId,
                        "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –º—ñ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                "üìç –ê–¥—Ä–µ—Å–∞, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                "–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 10, –ö–∞–∑–∞–Ω–∫–∞, –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á, +380671234567, 4444"
                );
            } else if (text.contains("–ù–æ–≤–∞ –ø–æ—à—Ç–∞")) {
                System.out.println("DEBUG: –ù–∞—Ç–∏—Å–Ω—É–ª–∏ –î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é");
                userStates.put(userId, "awaiting_post_delivery");
                tempStorage.put(userId + "_deliveryType", "–ù–æ–≤–∞ –ü–æ—à—Ç–∞");
                sendText(chatId,
                        "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                "üìÆ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                "‚Ññ12, –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á, +380501234567, 4444"
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // üîπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    private void clearUserState(Long chatId) {
        currentCategory.remove(chatId);
        currentSubcategory.remove(chatId);
        productIndex.remove(chatId);
    }

    // üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    private void sendCategories(Long chatId) throws TelegramApiException {
        List<String> categories = catalogSearcher.getCategories();

        ReplyKeyboardMarkup markup = ReplyKeyboardMarkup.builder()
                .resizeKeyboard(true)
                .keyboard(buildKeyboard(categories, true))
                .build();

        sendMessage(chatId, "üìÇ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", markup);
    }

    // üîπ –ü–æ–∫–∞–∑ –∫–æ—à–∏–∫–∞
    private void showCart(Long userId) throws TelegramApiException {
        List<Map<String, Object>> cart = userCart.get(userId);

        if (cart == null || cart.isEmpty()) {
            sendText(userId, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
            sendMessage(createUserMenu(String.valueOf(userId), userId));
            return;
        }

        StringBuilder sb = new StringBuilder("üìã –í–∞—à –∫–æ—à–∏–∫:\n\n");
        double total = 0;
        int i = 1;

        for (Map<String, Object> item : cart) {
            String name = item.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
            double price = Double.parseDouble(item.getOrDefault("price", "0").toString());
            total += price;
            sb.append(i++).append(". ").append(name).append(" ‚Äî ").append(price).append(" –≥—Ä–Ω\n");
        }
        sb.append("\nüí∞ –í—Å—å–æ–≥–æ: ").append(total).append(" –≥—Ä–Ω");

        // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        // –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äì –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä + –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä"));
        row1.add(new KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"));

        // –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ ‚Äì –Ω–∞–∑–∞–¥
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"));

        markup.setKeyboard(List.of(row1, row2));

        sendMessage(String.valueOf(userId), sb.toString(), markup);
    }

    // üîπ –ü–æ–±—É–¥–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ + –ù–∞–∑–∞–¥ + –ö–æ—à–∏–∫
    private List<KeyboardRow> buildKeyboard(List<String> items, boolean withBottom) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow currentRow = new KeyboardRow();
        int count = 0;

        for (String item : items) {
            currentRow.add(item);
            count++;

            if (count == 3) { // –º–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–∫—É
                keyboard.add(currentRow);
                currentRow = new KeyboardRow();
                count = 0;
            }
        }

        // —è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∫–Ω–æ–ø–∫–∏
        if (!currentRow.isEmpty()) {
            keyboard.add(currentRow);
        }

        // –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if (withBottom) {
            KeyboardRow bottom = new KeyboardRow();
            bottom.add("‚¨Ö –ù–∞–∑–∞–¥");
            keyboard.add(bottom);
        }

        return keyboard;
    }

    // üîπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫
    private void clearCart(Long userId) throws TelegramApiException {
        userCart.remove(userId);
        sendText(String.valueOf(userId), "üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!");
        sendMessage(createUserMenu(String.valueOf(userId), userId));
    }

    // üîπ –ù–∞–∑–∞–¥
    private void handleBack(Long chatId) throws TelegramApiException {
        if (currentSubcategory.containsKey(chatId)) {
            currentSubcategory.remove(chatId);
            productIndex.remove(chatId);
            sendSubcategories(chatId, currentCategory.get(chatId));
        } else if (currentCategory.containsKey(chatId)) {
            currentCategory.remove(chatId);
            sendCategories(chatId);
        } else {
            sendCategories(chatId);
        }
    }

    // üîπ –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    private void showNextProduct(Long chatId) throws TelegramApiException {
        List<Map<String, Object>> products = catalogSearcher.getProducts(
                currentCategory.get(chatId), currentSubcategory.get(chatId)
        );

        if (products == null || products.isEmpty()) {
            sendText(chatId, "‚ùå –£ —Ü—ñ–π –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.");
            return;
        }

        // –ë–µ—Ä–µ–º–æ —ñ–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä—É
        int index = productIndex.getOrDefault(chatId, 0);
        Map<String, Object> product = products.get(index);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"
        lastShownProduct.put(chatId, product);

        String name = product.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
        String price = product.getOrDefault("price", "N/A").toString();
        String unit = product.getOrDefault("unit", "—à—Ç").toString();
        String description = product.getOrDefault("description", "").toString();
        String photoPath = product.getOrDefault("photo", "").toString();
        String manufacturer = product.getOrDefault("manufacturer", "").toString();

        StringBuilder sb = new StringBuilder("üì¶ ").append(name)
                .append("\nüí∞ –¶—ñ–Ω–∞: ").append(price).append(" –≥—Ä–Ω –∑–∞ ").append(unit);
        if (!manufacturer.isEmpty()) sb.append("\nüè≠ –í–∏—Ä–æ–±–Ω–∏–∫: ").append(manufacturer);
        if (!description.isEmpty()) sb.append("\nüìñ ").append(description);

        KeyboardRow row = new KeyboardRow();
        row.add("‚û° –î–∞–ª—ñ");
        row.add("üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫");

        List<KeyboardRow> kb = new ArrayList<>();
        kb.add(row);
        kb.add(new KeyboardRow(List.of(new KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))));

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        markup.setKeyboard(kb);

        if (photoPath != null && !photoPath.isEmpty()) {
            String fileName = new java.io.File(photoPath).getName();
            sendPhotoFromResources(chatId.toString(), fileName, sb.toString(), markup);
        } else {
            sendText(chatId.toString(), sb.toString());
        }

        // –ü—ñ—Å–ª—è –ø–æ–∫–∞–∑—É —Ç–æ–≤–∞—Ä—É –∑–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–∫–∞–∑—É
        index++;
        if (index >= products.size()) index = 0;
        productIndex.put(chatId, index);
    }

    // üîπ –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
    private void addToCart(Long chatId) throws TelegramApiException {
        Map<String, Object> product = lastShownProduct.get(chatId);

        if (product == null) {
            sendText(chatId, "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            return;
        }

        userCart.computeIfAbsent(chatId, k -> new ArrayList<>()).add(product);
        sendText(chatId, "‚úÖ –¢–æ–≤–∞—Ä \"" + product.get("name") + "\" –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!");
    }

    private final UserManager userManager = new UserManager();

    private void handleState(Long userId, String chatId, String text, String state, Update update) {

        switch (state) {

            case "search_catalog" -> handleSearch(userId, chatId, text);
            case "edit_product" -> handleEditProductStart(userId, chatId, text);
            case "choose_product" -> handleChooseProduct(userId, chatId, text);
            case "editing" -> handleEditing(userId, chatId, text);
            case "awaiting_field_value" -> handleAwaitingField(userId, chatId, text);
            case "awaiting_subcategory" -> handleAddToSubcategory(userId, chatId, text);
            case "add_hit" -> handleAddHit(userId, chatId, text);
            case "add_category" -> handleAddCategory(userId, chatId, text);
            case "add_subcategory" -> handleAddSubcategory(userId, chatId, text);
            case "add_new_subcategory" -> handleAddNewSubcategory(userId, chatId, text);
            case "choose_category_for_sub" -> handleChooseCategoryForSub(userId, chatId, text);
            case "delete_category_select" -> handleDeleteCategorySelect(userId, chatId, text);
            case "category_management" -> handleCategoryManagementState(userId, chatId, text);
            case "waiting_for_search" -> handleWaitingForSearch(userId, chatId, text);
            case "waiting_for_product_number" -> handleWaitingForProductNumber(userId, chatId, text);

            // ‚Üê –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Å—Ç–∞–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            case "reject_order_reason" -> {
                String reason = text; // —Ç–µ–∫—Å—Ç, —è–∫–∏–π –≤–≤—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä

                try (Connection conn = DatabaseManager.getConnection()) {
                    // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏
                    String sql = "SELECT * FROM orders WHERE status != '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' AND status != '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ' ORDER BY id ASC LIMIT 1";
                    try (PreparedStatement stmt = conn.prepareStatement(sql);
                         ResultSet rs = stmt.executeQuery()) {

                        if (!rs.isBeforeFirst()) {
                            sendText(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.");
                            userStates.remove(userId);
                            break;
                        }

                        if (rs.next()) {
                            Long orderUserId = rs.getLong("userId");
                            String orderCode = rs.getString("orderCode");

                            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
                            sendText(orderUserId.toString(), "‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: " + reason);

                            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ –∫–æ–º–µ–Ω—Ç–∞—Ä —É –±–∞–∑—ñ
                            String updateSql = "UPDATE orders SET status = ?, comment = ? WHERE orderCode = ?";
                            try (PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {
                                updateStmt.setString(1, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ");
                                updateStmt.setString(2, reason);
                                updateStmt.setString(3, orderCode);
                                int rows = updateStmt.executeUpdate();
                                if (rows == 0) {
                                    sendText(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –±–∞–∑—ñ.");
                                }
                            }

                            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É
                            sendText(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚úÖ");

                            // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                            showAdminOrder(userId, chatId);
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
                }

                // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
                userStates.remove(userId);
            }

            case "reply_to_customer" -> {
                if (!ADMINS.contains(userId)) {
                    sendText(chatId, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.");
                    break;
                }

                Optional<Long> targetUserIdOpt = supportAnswers.keySet().stream().findFirst();
                if (targetUserIdOpt.isEmpty()) {
                    sendText(chatId, "‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.");
                    break;
                }

                Long targetUserId = targetUserIdOpt.get();
                List<String> messages = supportAnswers.get(targetUserId);
                if (messages == null || messages.isEmpty()) {
                    sendText(chatId, "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î.");
                    break;
                }

                String userMessage = messages.get(0); // –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                userStates.put(userId, "awaiting_admin_reply");
                tempStorage.put(userId + "_reply_to", targetUserId);
                tempStorage.put(userId + "_user_message", userMessage);

                sendText(chatId,
                        "‚úâ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + targetUserId + "\n\n" +
                                userMessage + "\n\n‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:"
                );
            }

            case "ask_consultant" -> {
                if (text != null) {
                    supportAnswers.computeIfAbsent(userId, k -> new ArrayList<>()).add(text);
                    userStates.remove(userId);
                    sendText(chatId, "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!");
                }
            }

            // üìå –í–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            case "waiting_for_feedback" -> {
                FeedbackManager.addFeedback(userId, text);
                sendText(chatId, "‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!");
                userStates.remove(userId);
            }

            case "writing_reply" -> {
                Long replyTargetId = adminReplyTarget.get(userId); // –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É
                if (replyTargetId != null) {
                    sendText(replyTargetId.toString(), "üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" + text);
                    sendText(chatId, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É " + replyTargetId);
                } else {
                    sendText(chatId, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.");
                }
                userStates.remove(userId);
                adminReplyTarget.remove(userId);
            }

            case "awaiting_admin_reply" -> {
                Long replyTargetId = (Long) tempStorage.get(userId + "_reply_to"); // –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó
                if (replyTargetId != null) {
                    sendText(replyTargetId.toString(), "üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" + text);
                    sendText(chatId, "‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É " + replyTargetId);
                } else {
                    sendText(chatId, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.");
                }

                // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
                userStates.remove(userId);
                tempStorage.remove(userId + "_reply_to");
                tempStorage.remove(userId + "_user_message");
            }

            case "choose_delivery_type" -> {
                System.out.println("DEBUG: User ID = " + userId + ", State = " + userStates.get(userId) + ", Text = " + text);
                // –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏
                if ("üè¨ –°–∞–º–æ–≤–∏–≤—ñ–∑".equals(text)) {
                    tempStorage.put(userId + "_deliveryType", "–°–∞–º–æ–≤–∏–≤—ñ–∑");
                    sendText(chatId, "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                            "üèô –ú—ñ—Å—Ç–æ, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ö–∞—Ä—Ç–∫–∞");
                    userStates.put(userId, "order_pickup");
                } else if ("üìç –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É".equals(text)) {
                    tempStorage.put(userId + "_deliveryType", "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É");
                    sendText(chatId, "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –º—ñ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                            "üìç –ê–¥—Ä–µ—Å–∞, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ö–∞—Ä—Ç–∫–∞");
                    userStates.put(userId, "awaiting_city_delivery");
                } else if ("üìÆ –ù–æ–≤–∞ –ü–æ—à—Ç–∞".equals(text)) {
                    tempStorage.put(userId + "_deliveryType", "–ù–æ–≤–∞ –ü–æ—à—Ç–∞");
                    sendText(chatId, "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                            "üìÆ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ö–∞—Ä—Ç–∫–∞");
                    userStates.put(userId, "awaiting_post_delivery");
                }
            }

            case "awaiting_hit_type" -> {
                if (!ADMINS.contains(userId)) break;
                if (text == null) return;

                if (text.equalsIgnoreCase("–∑ –æ–ø–∏—Å–æ–º")) {
                    userStates.put(userId, "awaiting_hit_title");
                    sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É:");
                } else if (text.equalsIgnoreCase("—Ç—ñ–ª—å–∫–∏ –º–µ–¥—ñ–∞")) {
                    userStates.put(userId, "awaiting_hit_media_only");
                    sendText(chatId, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'):");
                } else {
                    sendText(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å '–ó –æ–ø–∏—Å–æ–º' –∞–±–æ '–¢—ñ–ª—å–∫–∏ –º–µ–¥—ñ–∞'");
                }
                return;
            }

            case "awaiting_hit_title" -> {
                if (text == null || text.isBlank()) {
                    sendText(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É.");
                    return;
                }
                tempStorage.put(userId + "_hit_title", text);
                userStates.put(userId, "awaiting_hit_description");
                sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'):");
                return;
            }

            case "awaiting_hit_description" -> {
                if (text == null) {
                    sendText(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É.");
                    return;
                }
                tempStorage.put(userId + "_hit_description", text.equalsIgnoreCase("–Ω–µ–º–∞—î") ? "–Ω–µ–º–∞—î" : text);
                userStates.put(userId, "awaiting_hit_media");
                sendText(chatId, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'):");
                return;
            }

            case "awaiting_hit_media" -> {
                String title = tempStorage.getOrDefault(userId + "_hit_title", "–Ω–µ–º–∞—î").toString();
                String description = tempStorage.getOrDefault(userId + "_hit_description", "–Ω–µ–º–∞—î").toString();
                String media = "–Ω–µ–º–∞—î";

                if (update.getMessage().hasPhoto()) {
                    List<PhotoSize> photos = update.getMessage().getPhoto();
                    media = photos.get(photos.size() - 1).getFileId();
                } else if (update.getMessage().hasVideo()) {
                    media = update.getMessage().getVideo().getFileId();
                } else if (text != null && text.equalsIgnoreCase("–Ω–µ–º–∞—î")) {
                    media = "–Ω–µ–º–∞—î";
                } else if (text != null && !text.isBlank()) {
                    media = text;
                }

                HitsManager.saveHit(title, description, media);

                // –û—á–∏—â–µ–Ω–Ω—è
                userStates.remove(userId);
                tempStorage.remove(userId + "_hit_title");
                tempStorage.remove(userId + "_hit_description");

                sendText(chatId, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —É –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É!");

                // –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
                for (Long uid : userManager.getRegisteredUsers()) {
                    if (!ADMINS.contains(uid)) {
                        try {
                            sendText(uid, "üåü –ù–æ–≤–∏–π –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É –∑‚Äô—è–≤–∏–≤—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω—ñ!\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –π–æ–≥–æ —É —Ä–æ–∑–¥—ñ–ª—ñ ¬´–•—ñ—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤¬ª!");
                        } catch (Exception ignored) {}
                    }
                }
                return;
            }

            case "awaiting_hit_media_only" -> {
                String media = null;

                if (update.getMessage().hasPhoto()) {
                    List<PhotoSize> photos = update.getMessage().getPhoto();
                    media = photos.get(photos.size() - 1).getFileId();
                } else if (update.getMessage().hasVideo()) {
                    media = update.getMessage().getVideo().getFileId();
                } else if (text != null && text.equalsIgnoreCase("–Ω–µ–º–∞—î")) {
                    media = "–Ω–µ–º–∞—î";
                } else {
                    sendText(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ, –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'.");
                    return;
                }

                HitsManager.saveHit(null, "–Ω–µ–º–∞—î", media); // title=null, description="–Ω–µ–º–∞—î"

                userStates.remove(userId);
                tempStorage.remove(userId + "_hit_media");

                sendText(chatId, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —É –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É!");

                for (Long uid : userManager.getRegisteredUsers()) {
                    if (!ADMINS.contains(uid)) {
                        try {
                            sendText(uid, "üåü –ù–æ–≤–∏–π –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É –∑‚Äô—è–≤–∏–≤—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω—ñ!\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –π–æ–≥–æ —É —Ä–æ–∑–¥—ñ–ª—ñ ¬´–•—ñ—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤¬ª!");
                        } catch (Exception ignored) {}
                    }
                }
                return;
            }

            // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏
            case "awaiting_delivery_choice" -> {
                switch (text) {
                    case "üè¨ –°–∞–º–æ–≤–∏–≤—ñ–∑" -> {
                        tempStorage.put(userId + "_deliveryType", "–°–∞–º–æ–≤–∏–≤—ñ–∑");
                        userStates.put(userId, "order_pickup");
                        sendText(chatId,
                                "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                        "üèô –ú—ñ—Å—Ç–æ\nüë§ –ü.–Ü.\nüìû –¢–µ–ª–µ—Ñ–æ–Ω\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                        "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                        "–ö–∞–∑–∞–Ω–∫–∞, –°–∏–¥–æ—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –û–ª–µ–∫—Å—ñ—ó–≤–Ω–∞, +380631234567, 4444");
                    }

                    case "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É" -> {
                        tempStorage.put(userId + "_deliveryType", "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É");
                        userStates.put(userId, "awaiting_city_delivery");
                        sendText(chatId,
                                "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –º—ñ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                        "üìç –ê–¥—Ä–µ—Å–∞, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                        "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                        "–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 10, –ö–∞–∑–∞–Ω–∫–∞, –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á, +380671234567, 4444");
                    }

                    case "üìÆ –î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é" -> {
                        tempStorage.put(userId + "_deliveryType", "–ù–æ–≤–∞ –ø–æ—à—Ç–∞");
                        userStates.put(userId, "awaiting_post_delivery");
                        sendText(chatId,
                                "üìù –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
                                        "üìÆ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü, üë§ –ü.–Ü., üìû –¢–µ–ª–µ—Ñ–æ–Ω, üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–ú–∞–≥–∞–∑–∏–Ω—É)\n\n" +
                                        "üìå –ü—Ä–∏–∫–ª–∞–¥:\n" +
                                        "‚Ññ12, –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á, +380501234567, 4444");
                    }

                    case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" -> {
                        // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –º–µ–Ω—é –∫–æ—à–∏–∫–∞
                        userStates.put(userId, "cart_menu");
                        try {
                            showCart(userId); // —Ç—É—Ç –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ç–≤—ñ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–æ—à–∏–∫–∞
                        } catch (TelegramApiException e) {
                            e.printStackTrace();
                            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –∫–æ—à–∏–∫–∞.");
                        }
                    }

                    default -> sendText(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.");
                }
            }

            case "order_pickup" -> {
                List<Map<String, Object>> cart = userCart.get(userId);
                if (cart == null || cart.isEmpty()) {
                    sendText(chatId, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                    userStates.remove(userId);
                    return;
                }

                String orderCode = String.format("%04d", new Random().nextInt(10000));
                String[] parts = text.split(",", 4); // –ú—ñ—Å—Ç–æ, –ü.–Ü., –¢–µ–ª–µ—Ñ–æ–Ω, –ö–∞—Ä—Ç–∫–∞
                String city = parts.length > 0 ? parts[0].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String fullName = parts.length > 1 ? parts[1].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String phone = parts.length > 2 ? parts[2].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String card = parts.length > 3 ? parts[3].trim() : "–ù–µ–º–∞—î";

                StringBuilder itemsDb = new StringBuilder();
                double total = 0;
                for (Map<String, Object> item : cart) {
                    String name = item.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
                    double price = 0;
                    Object priceObj = item.get("price");
                    if (priceObj instanceof Number n) price = n.doubleValue();
                    else if (priceObj != null) {
                        try { price = Double.parseDouble(priceObj.toString()); } catch (NumberFormatException ignored) {}
                    }
                    itemsDb.append(name).append(":").append(price).append(";");
                    total += price;
                }

                try (Connection conn = DatabaseManager.getConnection()) {
                    String sql = "INSERT INTO orders (orderCode, userId, deliveryType, city, fullName, phone, card, status, item, total, date) " +
                            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())";
                    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                        stmt.setString(1, orderCode);
                        stmt.setLong(2, userId);
                        stmt.setString(3, "–°–∞–º–æ–≤–∏–≤—ñ–∑");
                        stmt.setString(4, city);
                        stmt.setString(5, fullName);
                        stmt.setString(6, phone);
                        stmt.setString(7, card);
                        stmt.setString(8, "–ù–æ–≤–µ");
                        stmt.setString(9, itemsDb.toString());
                        stmt.setDouble(10, total);
                        stmt.executeUpdate();
                    }

                    userCart.remove(userId);
                    userStates.remove(userId);

                    sendText(chatId, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n–ö–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " + orderCode +
                            "\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" + itemsDb.toString().replace(";", "\n") +
                            "\nüí∞ –í—Å—å–æ–≥–æ: " + total + " –≥—Ä–Ω\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —É –º–∞–≥–∞–∑–∏–Ω—ñ.");

                    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
                    for (Long adminId : ADMINS) {
                        showAdminOrder(adminId, adminId.toString());
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
                }
            }

            case "awaiting_city_delivery" -> {
                List<Map<String, Object>> cart = userCart.get(userId);
                if (cart == null || cart.isEmpty()) {
                    sendText(chatId, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                    userStates.remove(userId);
                    return;
                }

                String orderCode = String.format("%04d", new Random().nextInt(10000));
                String[] parts = text.split(",", 4); // –ê–¥—Ä–µ—Å–∞, –ü.–Ü., –¢–µ–ª–µ—Ñ–æ–Ω, –ö–∞—Ä—Ç–∫–∞
                String address = parts.length > 0 ? parts[0].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String fullName = parts.length > 1 ? parts[1].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String phone = parts.length > 2 ? parts[2].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String card = parts.length > 3 ? parts[3].trim() : "–ù–µ–º–∞—î";

                StringBuilder itemsDb = new StringBuilder();
                double total = 0;
                for (Map<String, Object> item : cart) {
                    String name = item.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
                    double price = 0;
                    Object priceObj = item.get("price");
                    if (priceObj instanceof Number n) price = n.doubleValue();
                    else if (priceObj != null) {
                        try { price = Double.parseDouble(priceObj.toString()); } catch (NumberFormatException ignored) {}
                    }
                    itemsDb.append(name).append(":").append(price).append(";");
                    total += price;
                }

                try (Connection conn = DatabaseManager.getConnection()) {
                    String sql = "INSERT INTO orders (orderCode, userId, deliveryType, address, fullName, phone, card, status, item, total, date) " +
                            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())";
                    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                        stmt.setString(1, orderCode);
                        stmt.setLong(2, userId);
                        stmt.setString(3, "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É");
                        stmt.setString(4, address);
                        stmt.setString(5, fullName);
                        stmt.setString(6, phone);
                        stmt.setString(7, card);
                        stmt.setString(8, "–ù–æ–≤–µ");
                        stmt.setString(9, itemsDb.toString());
                        stmt.setDouble(10, total);
                        stmt.executeUpdate();
                    }

                    userCart.remove(userId);
                    userStates.remove(userId);

                    sendText(chatId, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n–ö–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " + orderCode +
                            "\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" + itemsDb.toString().replace(";", "\n") +
                            "\nüí∞ –í—Å—å–æ–≥–æ: " + total + " –≥—Ä–Ω\n–í–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∑–∞ –≤–∫–∞–∑–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é.");

                    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
                    for (Long adminId : ADMINS) {
                        showAdminOrder(adminId, adminId.toString());
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
                }
            }

            case "awaiting_post_delivery" -> {
                List<Map<String, Object>> cart = userCart.get(userId);
                if (cart == null || cart.isEmpty()) {
                    sendText(chatId, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                    userStates.remove(userId);
                    return;
                }

                String orderCode = String.format("%04d", new Random().nextInt(10000));
                String[] parts = text.split(",", 4); // –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü, –ü.–Ü., –¢–µ–ª–µ—Ñ–æ–Ω, –ö–∞—Ä—Ç–∫–∞
                String postOffice = parts.length > 0 ? parts[0].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String fullName = parts.length > 1 ? parts[1].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String phone = parts.length > 2 ? parts[2].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ";
                String card = parts.length > 3 ? parts[3].trim() : "–ù–µ–º–∞—î";

                StringBuilder itemsDb = new StringBuilder();
                double total = 0;
                for (Map<String, Object> item : cart) {
                    String name = item.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
                    double price = 0;
                    Object priceObj = item.get("price");
                    if (priceObj instanceof Number n) price = n.doubleValue();
                    else if (priceObj != null) {
                        try { price = Double.parseDouble(priceObj.toString()); } catch (NumberFormatException ignored) {}
                    }
                    itemsDb.append(name).append(":").append(price).append(";");
                    total += price;
                }

                try (Connection conn = DatabaseManager.getConnection()) {
                    String sql = "INSERT INTO orders (orderCode, userId, deliveryType, postOffice, fullName, phone, card, status, item, total, date) " +
                            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())";
                    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                        stmt.setString(1, orderCode);
                        stmt.setLong(2, userId);
                        stmt.setString(3, "–ù–æ–≤–∞ –ø–æ—à—Ç–∞");
                        stmt.setString(4, postOffice);
                        stmt.setString(5, fullName);
                        stmt.setString(6, phone);
                        stmt.setString(7, card);
                        stmt.setString(8, "–ù–æ–≤–µ");
                        stmt.setString(9, itemsDb.toString());
                        stmt.setDouble(10, total);
                        stmt.executeUpdate();
                    }

                    userCart.remove(userId);
                    userStates.remove(userId);
                    tempStorage.remove(userId + "_deliveryType");

                    sendText(chatId, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n–ö–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " + orderCode +
                            "\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" + itemsDb.toString().replace(";", "\n") +
                            "\nüí∞ –í—Å—å–æ–≥–æ: " + total + " –≥—Ä–Ω\n–í–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º.");

                    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
                    for (Long adminId : ADMINS) {
                        showAdminOrder(adminId, adminId.toString());
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
                }
            }

            case "invites_menu" -> {
                switch (text) {
                    case "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                        userStates.put(userId, "add_invite");
                        sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\nName;Kasa;City");
                    }
                    case "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                        userStates.put(userId, "delete_invite");
                        sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:");
                    }
                    case "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                        userStates.put(userId, "edit_invite");
                        sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\nID;Name;Kasa;City");
                    }
                    case "üìÑ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                        String sql = "SELECT * FROM invites ORDER BY id ASC";

                        try (Connection conn = DatabaseManager.getConnection();
                             PreparedStatement stmt = conn.prepareStatement(sql);
                             ResultSet rs = stmt.executeQuery()) {

                            StringBuilder sb = new StringBuilder("üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω—å:\n\n");
                            boolean hasInvites = false;

                            while (rs.next()) {
                                hasInvites = true;
                                sb.append("üÜî ID: ").append(rs.getInt("id")).append("\n")
                                        .append("üë§ –Ü–º'—è: ").append(rs.getString("name")).append("\n")
                                        .append("üí∞ –ö–∞—Å–∞: ").append(rs.getString("kasa")).append("\n")
                                        .append("üèôÔ∏è –ú—ñ—Å—Ç–æ: ").append(rs.getString("city")).append("\n")
                                        .append("üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å: ").append(rs.getInt("number")).append("\n")
                                        .append("-----------------------------\n");
                            }

                            if (!hasInvites) {
                                sendText(chatId, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø—Ä–æ—à–µ–Ω—å.");
                            } else {
                                sendText(chatId, sb.toString());
                            }

                        } catch (SQLException e) {
                            e.printStackTrace();
                            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø—Ä–æ—à–µ–Ω—å.");
                        }
                    }
                    case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞" -> {
                        sendMessage(createDeveloperMenu(chatId));
                        userStates.remove(userId);
                    }
                    default -> sendText(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.");
                }
            }

            // --- –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
            case "add_invite" -> {
                String[] parts = text.split(";");
                if (parts.length < 3) {
                    sendText(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Name;Kasa;City");
                } else {
                    boolean success = InviteManager.addInvite(parts[0], parts[1], parts[2], botUsername);
                    if (success) sendText(chatId, "‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!");
                    else sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è.");
                }
                userStates.remove(userId);
            }

            // --- –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
            case "delete_invite" -> {
                try {
                    int id = Integer.parseInt(text.trim());
                    boolean deleted = InviteManager.deleteInvite(id); // –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ —É InviteManager
                    if (deleted) sendText(chatId, "‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!");
                    else sendText(chatId, "‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                } catch (Exception e) {
                    sendText(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID!");
                }
                userStates.remove(userId);
            }

            // --- –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
            case "edit_invite" -> {
                String[] parts = text.split(";");
                if (parts.length < 4) {
                    sendText(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ID;Name;Kasa;City");
                } else {
                    try {
                        int id = Integer.parseInt(parts[0]);
                        boolean edited = InviteManager.editInvite(id, parts[1], parts[2], parts[3]); // –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ —É InviteManager
                        if (edited) sendText(chatId, "‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!");
                        else sendText(chatId, "‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
                    } catch (Exception e) {
                        sendText(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID!");
                    }
                }
                userStates.remove(userId);
            }


            case "logs_invites" -> {
                Map<Integer, Map<String, Object>> invites = DeveloperFileManager.getAllInvites();
                if (invites.isEmpty()) {
                    sendText(chatId, "üìä –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø—Ä–æ—à–µ–Ω—å.");
                } else {
                    StringBuilder sb = new StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à—É–≤–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å:\n\n");
                    for (Map.Entry<Integer, Map<String, Object>> entry : invites.entrySet()) {
                        Map<String, Object> data = entry.getValue();
                        sb.append("üÜî ID: ").append(entry.getKey()).append("\n")
                                .append("üë§ –Ü–º'—è: ").append(data.get("name")).append("\n")
                                .append("üí∞ –ö–∞—Å–∞: ").append(data.get("kasa")).append("\n")
                                .append("üèôÔ∏è –ú—ñ—Å—Ç–æ: ").append(data.get("city")).append("\n")
                                .append("üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ").append(data.get("number")).append("\n")
                                .append("-----------------------------\n");
                    }
                    sendText(chatId, sb.toString());
                }
                userStates.remove(userId);
            }

            case "logs_no_invite" -> {
                List<Long> noInviteUsers = DeveloperFileManager.getNoInviteUsers();
                int count = noInviteUsers.size(); // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω—å
                sendText(chatId, "üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –±–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω—å: " + count);
                userStates.remove(userId);
            }

            case "logs_orders" -> {
                Map<String, Integer> summary = DeveloperFileManager.getOrdersSummary();
                List<Map<String, String>> rejectedOrders = DeveloperFileManager.getRejectedOrders();

                StringBuilder message = new StringBuilder();
                message.append("üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:\n")
                        .append("–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: ").append(summary.getOrDefault("total", 0)).append("\n")
                        .append("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ/–≥–æ—Ç–æ–≤—ñ: ").append(summary.getOrDefault("sent", 0)).append("\n")
                        .append("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: ").append(summary.getOrDefault("rejected", 0));

                if (!rejectedOrders.isEmpty()) {
                    message.append("\n\n–ü—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:");
                    for (Map<String, String> order : rejectedOrders) {
                        message.append("\n‚Ä¢ [")
                                .append(order.get("orderCode"))
                                .append("] ")
                                .append(order.get("comment"));
                    }
                }

                sendText(chatId, message.toString());
                userStates.remove(userId);
            }

            case "editing_field_value" -> {
                String field = adminEditingField.get(userId);        // —è–∫–µ –ø–æ–ª–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è
                String productName = adminEditingProduct.get(userId);

                if (productName == null || field == null) {
                    sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    userStates.remove(userId);
                    return;
                }

                String newValue = text.trim();

                // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É ---
                if ("unit".equals(field)) {
                    if (!newValue.equalsIgnoreCase("—à—Ç") && !newValue.equalsIgnoreCase("–º–µ—Ç—Ä")) {
                        sendText(chatId, "‚ùå –î–æ–ø—É—Å—Ç–∏–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: '—à—Ç' –∞–±–æ '–º–µ—Ç—Ä'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:");
                        return; // –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω await
                    }
                }

                try {
                    CatalogEditor.updateField(productName, field, newValue);
                    sendText(chatId, "‚úÖ –ü–æ–ª–µ '" + field + "' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É '" + productName + "'");
                } catch (Exception e) {
                    sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–ª—è '" + field + "'");
                    e.printStackTrace();
                }

                // --- –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ ---
                userStates.remove(userId);
                adminEditingField.remove(userId);
                adminEditingProduct.remove(userId);
            }

            case "changelog_menu" -> {
                List<String> logs = DeveloperFileManager.getChangelog();
                if (logs.isEmpty()) sendText(chatId, "üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–∏ –ø–æ–∫–∏ —â–æ –ø—É—Å—Ç–∏–π.");
                else sendText(chatId, "üìù Changelog:\n" + String.join("\n", logs));
                userStates.remove(userId);
            }
        }
    }

    // üîç –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É
    private void handleSearch(Long userId, String chatId, String text) {
        List<Map<String, Object>> products = loadCatalogFlat();
        List<Map<String, Object>> matches = new ArrayList<>();

        if (products == null || products.isEmpty()) {
            sendText(chatId, "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è.");
            userStates.remove(userId);
            return;
        }

        for (Map<String, Object> p : products) {
            String name = String.valueOf(p.get("name")).toLowerCase();
            if (name.contains(text.toLowerCase())) {
                matches.add(p);
            }
        }

        if (matches.isEmpty()) {
            sendText(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.");
        } else {
            searchResults.put(Long.parseLong(chatId), matches);
            productIndex.put(Long.parseLong(chatId), 0);
            try {
                sendSearchedProduct(Long.parseLong(chatId));
            } catch (TelegramApiException e) {
                e.printStackTrace();
                sendText(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.");
            }
        }

        userStates.remove(userId);
    }

    private void handleWaitingForProductNumber(Long userId, String chatId, String text) {
        List<Map<String, Object>> found = searchResults.get(Long.parseLong(chatId));
        if (found == null || found.isEmpty()) {
            sendText(chatId, "‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—à—É–∫ —â–µ —Ä–∞–∑.");
            userStates.remove(userId);
            return;
        }

        try {
            int number = Integer.parseInt(text.trim());
            if (number < 1 || number > found.size()) {
                sendText(chatId, "‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥ 1 –¥–æ " + found.size());
                return;
            }

            Map<String, Object> chosenProduct = found.get(number - 1);
            searchResults.put(Long.parseLong(chatId), List.of(chosenProduct));
            productIndex.put(Long.parseLong(chatId), 0);
            sendSearchedProduct(Long.parseLong(chatId));
            userStates.remove(userId);

        } catch (NumberFormatException e) {
            sendText(chatId, "‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É.");
        } catch (TelegramApiException e) {
            sendText(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ–∫–∞–∑—É —Ç–æ–≤–∞—Ä—É.");
        }
    }

    private void handleWaitingForSearch(Long userId, String chatId, String text) {
        String query = text.trim();
        if (query.isEmpty()) {
            sendText(chatId, "‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É.");
            return;
        }

        try {
            CatalogSearcher searcher = new CatalogSearcher();
            List<Map<String, Object>> foundProducts = new ArrayList<>();

            // –ü–æ—à—É–∫ —É –ø–ª–æ—Å–∫–æ–º—É —Å–ø–∏—Å–∫—É products
            for (Map<String, Object> p : searcher.getFlatProducts()) {
                String productName = String.valueOf(p.getOrDefault("name", "")).toLowerCase();
                if (productName.contains(query.toLowerCase())) {
                    foundProducts.add(new HashMap<>(p));
                }
            }

            // –ü–æ—à—É–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É catalog
            List<Map<String, Object>> catalog = searcher.getCatalog();
            if (catalog != null) {
                searcher.extractProductsFromCatalogForSearch(catalog, foundProducts, query);
            }

            System.out.println("üîé Total found products: " + foundProducts.size());

            if (foundProducts.isEmpty()) {
                sendText(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.");
                userStates.remove(userId);
                return;
            }

            // –ö—ñ–ª—å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            if (foundProducts.size() > 1) {
                StringBuilder sb = new StringBuilder("üîé –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä:\n\n");
                int index = 1;
                for (Map<String, Object> p : foundProducts) {
                    sb.append(index++).append(". ").append(p.get("name")).append("\n");
                }
                searchResults.put(Long.parseLong(chatId), foundProducts);
                userStates.put(userId, "waiting_for_product_number");
                sendText(chatId, sb.toString());
                return;
            }

            // –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            searchResults.put(Long.parseLong(chatId), foundProducts);
            productIndex.put(Long.parseLong(chatId), 0);
            sendSearchedProduct(Long.parseLong(chatId));
            userStates.remove(userId);

        } catch (Exception e) {
            e.printStackTrace();
            sendText(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—É.");
            userStates.remove(userId);
        }
    }


    // ‚úèÔ∏è –ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    private void handleEditProductStart(Long userId, String chatId, String text) {
        List<Map<String, Object>> matchesMap = catalogSearcher.searchByKeywordsAdmin(text);
        List<String> matches = new ArrayList<>();
        for (Map<String, Object> p : matchesMap) {
            matches.add((String) p.get("name"));
        }

        if (matches.isEmpty()) sendText(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + text);
        else if (matches.size() == 1) {
            adminEditingProduct.put(userId, matches.get(0));
            userStates.put(userId, "editing");
            sendMessage(createEditMenu(chatId, matches.get(0)));
        } else {
            adminMatchList.put(userId, matches);
            userStates.put(userId, "choose_product");
            StringBuilder sb = new StringBuilder("–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä:\n\n");
            for (int i = 0; i < matches.size(); i++) sb.append(i + 1).append(". ").append(matches.get(i)).append("\n");
            sendText(chatId, sb.toString());
        }
    }

    // –í–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—É –ø–æ —Å–ø–∏—Å–∫—É
    private void handleChooseProduct(Long userId, String chatId, String text) {
        List<String> matches = adminMatchList.get(userId);
        if (matches == null || matches.isEmpty()) {
            sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            userStates.remove(userId);
            return;
        }

        try {
            int index = Integer.parseInt(text.trim()) - 1;
            if (index < 0 || index >= matches.size()) {
                sendText(chatId, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                return;
            }

            String selectedProduct = matches.get(index);
            adminEditingProduct.put(userId, selectedProduct);
            userStates.put(userId, "editing");
            adminMatchList.remove(userId);

            sendMessage(createEditMenu(chatId, selectedProduct));
        } catch (NumberFormatException e) {
            sendText(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —ñ–∑ —Å–ø–∏—Å–∫—É.");
        }
    }

    // üîß –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    private void handleEditing(Long userId, String chatId, String text) {
        String productName = adminEditingProduct.get(userId);
        if (productName == null) return;

        switch (text) {
            case "‚úèÔ∏è –ù–∞–∑–≤—É":
                adminEditingField.put(userId, "name");
                userStates.put(userId, "awaiting_field_value");
                sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:");
                break;

            case "üí∞ –¶—ñ–Ω—É":
                adminEditingField.put(userId, "price");
                userStates.put(userId, "awaiting_field_value");
                sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É:");
                break;

            case "üìñ –û–ø–∏—Å":
                adminEditingField.put(userId, "description");
                userStates.put(userId, "awaiting_field_value");
                sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å:");
                break;

            case "üóÇÔ∏è –î–æ–¥–∞—Ç–∏ –≤ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é":
                userStates.put(userId, "awaiting_subcategory");
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –∫—É–¥–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä:");
                break;

            case "üñºÔ∏è –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é":
                userStates.put(userId, "awaiting_photo");
                sendText(chatId, "üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É '" + productName + "' –∑—ñ —Å–≤–æ–≥–æ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞:");
                break;

            case "üìè –û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É":
                adminEditingField.put(userId, "unit");
                userStates.put(userId, "editing_field_value");
                sendText(chatId, "–í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä—É (—à—Ç –∞–±–æ –º–µ—Ç—Ä):");
                break;

            case "üè≠ –í–∏—Ä–æ–±–Ω–∏–∫":
                adminEditingField.put(userId, "manufacturer");
                userStates.put(userId, "editing_field_value");
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É (–∞–±–æ ‚ùå —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏):");
                break;

            default:
                sendText(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
                break;
        }
    }

    // üìù –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    private void handleAwaitingField(Long userId, String chatId, String newValue) {
        String productName = adminEditingProduct.get(userId);
        String field = adminEditingField.get(userId);

        if (field == null || productName == null) return;

        CatalogEditor.updateField(productName, field, newValue);

        sendText(chatId, "‚úÖ –ü–æ–ª–µ '" + field + "' –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É: " + productName);
        adminEditingProduct.remove(userId);
        adminEditingField.remove(userId);
        userStates.remove(userId);
    }

    // ‚≠ê –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö—ñ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É
    private void handleAddHit(Long userId, String chatId, String text) {
        hitItems.add("‚≠ê " + text);
        userStates.remove(userId);
        sendText(chatId, "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ —Ö—ñ—Ç—ñ–≤ –ø—Ä–æ–¥–∞–∂—É!");
    }

    private void handleAddCategory(Long userId, String chatId, String text) {
        adminNewCategory.put(userId, text); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        userStates.put(userId, "add_subcategory");
        sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '" + text + "' (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏, –∑–∞–ª–∏—à–∏–≤—à–∏ –ø—É—Å—Ç–∏–º):");
    }

    private void handleAddSubcategory(Long userId, String chatId, String subcategoryName) {
        String categoryName = adminNewCategory.get(userId);
        if (categoryName == null) {
            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            userStates.remove(userId);
            return;
        }

        // –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —É CatalogEditor
        boolean catAdded = CatalogEditor.addCategory(categoryName);
        if (!catAdded) {
            sendText(chatId, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î: " + categoryName);
        }

        // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫—â–æ –Ω–∞–∑–≤–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –ø–æ—Ä–æ–∂–Ω—è
        if (subcategoryName != null && !subcategoryName.isEmpty()) {
            boolean subAdded = CatalogEditor.addSubcategory(categoryName, subcategoryName);
            if (!subAdded) {
                sendText(chatId, "‚ö†Ô∏è –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î: " + subcategoryName);
            }
        }

        sendText(chatId, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–æ–¥–∞–Ω—ñ —É –∫–∞—Ç–∞–ª–æ–≥:\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: " + categoryName +
                (subcategoryName.isEmpty() ? "" : "\n–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: " + subcategoryName));

        adminNewCategory.remove(userId);
        userStates.remove(userId);
    }

    private void handleAddToSubcategory(Long userId, String chatId, String subcategoryName) {
        String productName = adminEditingProduct.get(userId);
        if (productName == null) {
            sendText(chatId, "‚ùå Error: No product selected to add to the subcategory.");
            userStates.remove(userId);
            return;
        }

        System.out.println("INFO: Adding product '" + productName + "' to subcategory '" + subcategoryName + "'");

        // --- Get price from YAML
        double price = CatalogEditor.getProductPriceFromYAML(productName);
        if (price <= 0.0) {
            System.out.println("DEBUG: Price <= 0, setting default 0.0");
            price = 0.0;
        }

        // --- Check subcategory
        if (!CatalogEditor.subcategoryExists(subcategoryName)) {
            sendText(chatId, "‚ùå Subcategory '" + subcategoryName + "' not found in MySQL database.");
            userStates.remove(userId);
            return;
        }

        // --- Add product
        boolean success = CatalogEditor.addProductToSubcategory(productName, price, subcategoryName);

        if (success) {
            sendText(chatId, "‚úÖ Product '" + productName + "' added to subcategory '" + subcategoryName + "'!");
        } else {
            sendText(chatId, "‚ùå Failed to add product '" + productName +
                    "' to subcategory '" + subcategoryName + "'. It might already exist.");
        }

        userStates.remove(userId);
    }

    private void handleChooseCategoryForSub(Long userId, String chatId, String categoryName) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
        if (!CatalogEditor.categoryExists(categoryName)) {
            sendText(chatId, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é '" + categoryName + "' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É.");
            return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —ñ –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        adminNewCategory.put(userId, categoryName);
        userStates.put(userId, "add_new_subcategory");
        sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '" + categoryName + "':");
    }

    private void handleAddNewSubcategory(Long userId, String chatId, String subcategoryName) {
        String categoryName = adminNewCategory.get(userId);
        if (categoryName == null || subcategoryName.isEmpty()) {
            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            userStates.remove(userId);
            return;
        }

        boolean added = CatalogEditor.addSubcategory(categoryName, subcategoryName);

        if (added) {
            sendText(chatId, "‚úÖ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é '" + subcategoryName + "' –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '" + categoryName + "'.");
        } else {
            sendText(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é '" + subcategoryName + "'. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –≤–∂–µ —ñ—Å–Ω—É—î.");
        }

        adminNewCategory.remove(userId);
        userStates.remove(userId);
    }

    private void handleCategoryManagementState(Long userId, String chatId, String text) {
        switch (text) {
            case "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é" -> {
                userStates.put(userId, "add_category"); // —Ç—É—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç–≤—ñ–π handleAddCategory
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:");
            }
            case "‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é" -> {
                userStates.put(userId, "choose_category_for_sub");
                sendText(chatId, "üìÇ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –¥–æ —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:");
            }
            case "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó" -> {
                userStates.put(userId, "rename_category_select");
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:");
            }
            case "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é" -> {
                userStates.put(userId, "delete_category_select");
                sendText(chatId, "üóëÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:");
            }
            case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" -> {
                userStates.remove(userId);
                sendMessage(createAdminMenu(chatId));
            }
            default -> sendText(chatId, "ü§ñ –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
    }

    private void handleDeveloperText(Long userId, String chatId, String text, String botUsername) {
        switch (text) {
            case "üîó –ó–∞–ø—Ä–æ—à—É–≤–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" -> sendMessage(createInvitesMenu(chatId));
            case "üìú –õ–æ–≥–∏—Ä—É–≤–∞–Ω–Ω—è" -> sendText(chatId, "üìú –¢—É—Ç –±—É–¥–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è..."); // –ø—ñ–∑–Ω—ñ—à–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            case "üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–∏" -> {
                List<String> changelog = DeveloperFileManager.getChangelog(); // List<String>
                if (changelog.isEmpty()) {
                    sendText(chatId, "üìù –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—å.");
                } else {
                    StringBuilder sb = new StringBuilder("üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–∏:\n");
                    for (String entry : changelog) {
                        sb.append("‚Ä¢ ").append(entry).append("\n");
                    }
                    sendText(chatId, sb.toString());
                }
            }
            case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" -> sendMessage(createUserMenu(chatId, userId));
        }
    }

    private void handleInvitesText(Long userId, String chatId, String text, String botUsername) {
        switch (text) {
            case "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                // –ú–æ–∂–Ω–∞ —Ç—É—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–≤–µ—Å—Ç–∏ Name, Kasa, City —á–µ—Ä–µ–∑ userStates
                userStates.put(userId, "awaiting_new_invite");
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\nName,Kasa,City");
            }
            case "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                userStates.put(userId, "awaiting_edit_invite");
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:");
            }
            case "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                userStates.put(userId, "awaiting_delete_invite");
                sendText(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:");
            }
            case "üìÑ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" -> {
                String sql = "SELECT * FROM invites ORDER BY id ASC";

                try (Connection conn = DatabaseManager.getConnection();
                     PreparedStatement stmt = conn.prepareStatement(sql);
                     ResultSet rs = stmt.executeQuery()) {

                    StringBuilder sb = new StringBuilder("üîó –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—à–µ–Ω—å:\n");
                    boolean hasInvites = false;

                    while (rs.next()) {
                        hasInvites = true;
                        sb.append("ID: ").append(rs.getInt("id"))
                                .append(", Name: ").append(rs.getString("name"))
                                .append(", Kasa: ").append(rs.getString("kasa"))
                                .append(", City: ").append(rs.getString("city"))
                                .append(", Invite: ").append(rs.getString("invite"))
                                .append(", Number: ").append(rs.getInt("number"))
                                .append("\n");
                    }

                    if (!hasInvites) {
                        sendText(chatId, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø—Ä–æ—à–µ–Ω—å.");
                    } else {
                        sendText(chatId, sb.toString());
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø—Ä–æ—à–µ–Ω—å.");
                }
            }
            case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞" -> sendMessage(createDeveloperMenu(chatId));
        }
    }

    private void handleDeleteCategorySelect(Long userId, String chatId, String categoryName) {
        if (categoryName == null || categoryName.isBlank()) {
            sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.");
            userStates.remove(userId);
            return;
        }

        boolean removed = CatalogEditor.deleteCategory(categoryName);
        if (removed) {
            sendText(chatId, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '" + categoryName + "' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!");
        } else {
            sendText(chatId, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '" + categoryName + "' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É.");
        }

        userStates.remove(userId);
    }

    private void handleAwaitingPhoto(Long userId, String chatId, List<PhotoSize> photos) {
        try {
            if (photos == null || photos.isEmpty()) {
                sendText(chatId, "‚ùå –§–æ—Ç–æ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                System.out.println("[PHOTO] –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è userId=" + userId);
                return;
            }

            String productName = adminEditingProduct.get(userId);
            if (productName == null) {
                sendText(chatId, "‚ùå –ù–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–Ω–æ–≤–æ.");
                System.out.println("[PHOTO] –¢–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è userId=" + userId);
                return;
            }

            // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ (–Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º)
            PhotoSize photo = photos.get(photos.size() - 1);
            String fileId = photo.getFileId();
            System.out.println("[PHOTO] –û—Ç—Ä–∏–º–∞–Ω–æ fileId: " + fileId);

            org.telegram.telegrambots.meta.api.methods.GetFile getFileMethod = new GetFile(fileId);
            org.telegram.telegrambots.meta.api.objects.File file = execute(getFileMethod);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥ src/main/resources/images, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞
            java.io.File dir = new java.io.File("src/main/resources/images");
            if (!dir.exists()) dir.mkdirs();

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª –∑ fileId.jpg —É resources/images
            String filePath = "src/main/resources/images/" + fileId + ".jpg";
            java.io.File localFile = new java.io.File(filePath);

            try (InputStream is = new URL(file.getFileUrl(getBotToken())).openStream();
                 FileOutputStream fos = new FileOutputStream(localFile)) {
                byte[] buffer = new byte[4096];
                int read;
                while ((read = is.read(buffer)) != -1) {
                    fos.write(buffer, 0, read);
                }
            }

            System.out.println("[PHOTO] –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: " + localFile.getAbsolutePath());

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ photo —É YAML –∑ –≤—ñ–¥–Ω–æ—Å–Ω–∏–º —à–ª—è—Ö–æ–º –¥–ª—è JAR
            String relativePath = "images/" + fileId + ".jpg";
            CatalogEditor.updateField(productName, "photo", relativePath);

            sendText(chatId, "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–æ–≤–∞—Ä—É '" + productName + "'.");

            // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            userStates.remove(userId);
            adminEditingProduct.remove(userId);

        } catch (Exception e) {
            e.printStackTrace();
            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ.");
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É —É –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
    private List<Map<String, Object>> loadCatalogFlat() {
        try {
            CatalogSearcher cs = new CatalogSearcher();
            List<Map<String, Object>> allProducts = new ArrayList<>();

            // –ë–µ—Ä–µ–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            for (String cat : cs.getCategories()) {
                // –ë–µ—Ä–µ–º–æ –≤—Å—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                for (String sub : cs.getSubcategories(cat)) {
                    // –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –≤ —Å–ø–∏—Å–æ–∫
                    allProducts.addAll(cs.getProducts(cat, sub));
                }
            }

            return allProducts;
        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
    }

    private SendMessage createUserMenu(String chatId, Long userId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üß± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤");
        row1.add("üîç –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É");
        row1.add("üìã –ö–æ—à–∏–∫");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üéØ –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É");
        row2.add("üìç –ê–¥—Ä–µ—Å–∏ —Ç–∞ –ö–æ–Ω—Ç–∞–∫—Ç–∏");
        row2.add("\uD83C\uDF10 –°–æ—Ü-–º–µ—Ä–µ–∂—ñ");
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫");
        row3.add("üí¨ –î–æ–ø–æ–º–æ–≥–∞");
        keyboard.add(row3);

        // üîπ –Ø–∫—â–æ –∞–¥–º—ñ–Ω ‚Äî –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        if (ADMINS.contains(userId)) {
            KeyboardRow adminRow = new KeyboardRow();
            adminRow.add("‚öôÔ∏è –ü—Ä–æ–¥–∞–≤—Ü–∞ –º–µ–Ω—é");
            keyboard.add(adminRow);
        }

        // –Ø–∫—â–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫
        if (DEVELOPERS.contains(userId)) {
            KeyboardRow devRow = new KeyboardRow();
            devRow.add("üë®‚Äçüíª –ú–µ–Ω—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞");
            keyboard.add(devRow);
        }

        markup.setKeyboard(keyboard);
        return SendMessage.builder()
                .chatId(chatId)
                .text("üëã –ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∂–µ!\n" +
                        "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ú–∏—Ç—Ä–æ—Ñ–∞–Ω ü§ñ ‚Äî —è —Ç–≤—ñ–π –≤—ñ—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Ü—å–æ–º—É —á—É–¥–æ–≤–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∞–≥–∞–∑–∏–Ω—ñ üõçÔ∏è\n\n" +
                        "–ö–∞–∂—É—Ç—å, —è –≤–º—ñ—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –≤—Å–µ üòâ ‚Äî –≤—ñ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –¥–æ –≤–∏–≥—ñ–¥–Ω–æ—ó –∑–Ω–∏–∂–∫–∏ üí∏\n" +
                        "–¢–æ–∂ —Ä–æ–∑—Å–ª–∞–±—Å—è, –±–µ—Ä–∏ –∫–∞–≤—É ‚òï —ñ –¥–æ–∑–≤–æ–ª—å –º–µ–Ω—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑—Ä–æ–±–∏—Ç–∏ —Ç–≤–æ—ó –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Å—Ç–∏–º–∏ —Ç–∞ –ø—Ä–∏—î–º–Ω–∏–º–∏ üí´\n\n" +
                        "‚ú® –£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ —Ç–∏ –∑–Ω–∞–π–¥–µ—à —É—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞ —è –¥–æ–ø–æ–º–æ–∂—É —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º:\n\n" +
                        "üîπ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –π –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –∑–Ω–∞—Ö–æ–¥—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ, —ñ —è –¥–æ–ø–æ–º–æ–∂—É üòâ\n\n" +
                        "üîé –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É ‚Äî –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∞–±–æ —á–∞—Å—Ç–∏–Ω—É —Å–ª–æ–≤–∞, —ñ —è –º–∏—Ç—Ç—î–≤–æ –ø–æ–∫–∞–∂—É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üí°\n\n" +
                        "üß∫ –ö–æ—à–∏–∫ —ñ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –¥–æ–¥–∞–≤–∞–π —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ—à–∏–∫–∞ –π –æ–±–∏—Ä–∞–π –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:\n" +
                        "üöö –ù–æ–≤–∞ –ø–æ—à—Ç–∞ | üè† –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–¥–æ–º—É | üè¨ –°–∞–º–æ–≤–∏–≤—ñ–∑ —ñ–∑ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤.\n\n" +
                        "‚≠ê –í—ñ–¥–≥—É–∫–∏ ‚Äî –º–µ–Ω—ñ –¥—É–∂–µ –ø—Ä–∏—î–º–Ω–æ —á–∏—Ç–∞—Ç–∏ –≤–∞—à—ñ —Å–ª–æ–≤–∞ ‚ù§Ô∏è –ö–æ–∂–µ–Ω –≤—ñ–¥–≥—É–∫ –¥–æ–ø–æ–º–∞–≥–∞—î –º–µ–Ω—ñ —Å—Ç–∞–≤–∞—Ç–∏ –∫—Ä–∞—â–∏–º üí™\n\n" +
                        "üî• –•—ñ—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ —Ç–∞ –∑–Ω–∏–∂–∫–∏ ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –∞–∫—Ü—ñ—ó, —Å–µ–∑–æ–Ω–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Ç–æ–≤–∞—Ä–∏ üåû‚ùÑÔ∏è\n\n" +
                        "üí° –î–æ–ø–æ–º–æ–≥–∞ ‚Äî –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è? –ó–∞–ø–∏—Ç—É–π –º–µ–Ω–µ –∞–±–æ –∑–≤‚Äô—è–∂–∏—Å—å —ñ–∑ –Ω–∞—à–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏ üß°\n\n" +
                        "üåê –°–æ—Ü–º–µ—Ä–µ–∂—ñ —Ç–∞ –∞–¥—Ä–µ—Å–∏ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ ‚Äî –¥—ñ–∑–Ω–∞–≤–∞–π—Å—è –ø—Ä–æ –Ω–æ–≤–∏–Ω–∫–∏ —Ç–∞ –∑–∞–≤—ñ—Ç–∞–π –æ—Å–æ–±–∏—Å—Ç–æ üè™\n\n" +
                        "ü´∂ –Ø —Ä–∞–¥–∏–π, —â–æ —Ç–∏ —Ç—É—Ç!\n" +
                        "–†–∞–∑–æ–º –º–∏ –∑—Ä–æ–±–∏–º–æ —Ç–≤–æ—ó –ø–æ–∫—É–ø–∫–∏ –ª–µ–≥–∫–∏–º–∏, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–º–∏ –π —Ç—Ä—ñ—à–∫–∏ —á–∞—Ä—ñ–≤–Ω–∏–º–∏ üåà\n\n" +
                        "–ó –ø–æ–≤–∞–≥–æ—é, —Ç–≤—ñ–π –≤—ñ—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ ‚Äî –ú–∏—Ç—Ä–æ—Ñ–∞–Ω ü§ñüíô")
                .replyMarkup(markup)
                .build();
    }

    private SendMessage createAdminMenu(String chatId) {
        SendMessage msg = new SendMessage(chatId, "üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:");
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);

        KeyboardRow r1 = new KeyboardRow();
        r1.add(new KeyboardButton("üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"));
        r1.add(new KeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –ø–æ–∫—É–ø—Ü—é")); // <-- –Ω–æ–≤–∞ –∫–Ω–æ–ø–∫–∞

        KeyboardRow r2 = new KeyboardRow();
        r2.add(new KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));
        kb.setKeyboard(List.of(r1, r2));

        msg.setReplyMarkup(kb);
        return msg;
    }

    private SendMessage createDeveloperMenu(String chatId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥");
        row1.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä");
        row1.add("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
        row1.add("‚≠ê –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîó –ó–∞–ø—Ä–æ—à—É–≤–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è");
        row2.add("üìú –õ–æ–≥–∏—Ä—É–≤–∞–Ω–Ω—è");
        row2.add("üìù –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–∏");
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üí¨ –í—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
        row3.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
        keyboard.add(row3);

        markup.setKeyboard(keyboard);
        return SendMessage.builder()
                .chatId(chatId)
                .text("üë®‚Äçüíª –ú–µ–Ω—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
                .replyMarkup(markup)
                .build();
    }

    private SendMessage createEditMenu(String chatId, String productName) {
        SendMessage msg = new SendMessage(chatId, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: " + productName);
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);
        KeyboardRow r1 = new KeyboardRow();
        r1.add(new KeyboardButton("‚úèÔ∏è –ù–∞–∑–≤—É"));
        r1.add(new KeyboardButton("üí∞ –¶—ñ–Ω—É"));
        KeyboardRow r2 = new KeyboardRow();
        r2.add(new KeyboardButton("üìñ –û–ø–∏—Å"));
        r2.add(new KeyboardButton("üóÇÔ∏è –î–æ–¥–∞—Ç–∏ –≤ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é"));
        KeyboardRow r3 = new KeyboardRow();
        r3.add(new KeyboardButton("üñºÔ∏è –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é"));
        r3.add(new KeyboardButton("üìè –û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É"));
        KeyboardRow r4 = new KeyboardRow();
        r4.add(new KeyboardButton("üè≠ –í–∏—Ä–æ–±–Ω–∏–∫"));
        r4.add(new KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));
        kb.setKeyboard(List.of(r1, r2, r3, r4));
        msg.setReplyMarkup(kb);
        return msg;
    }

    private SendMessage createCategoryAdminMenu(String chatId) {
        SendMessage msg = new SendMessage(chatId, "üîß –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:");
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);

        KeyboardRow r1 = new KeyboardRow();
        r1.add(new KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"));// —Å—Ç–∞—Ä—Ç—É—î —Å—Ç–∞–Ω add_category
        r1.add(new KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é"));
        r1.add(new KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"));

        KeyboardRow r2 = new KeyboardRow();
        r2.add(new KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"));
        r2.add(new KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));

        kb.setKeyboard(List.of(r1, r2));
        msg.setReplyMarkup(kb);
        return msg;
    }

    private SendMessage createHelpMenu(String chatId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É");
        row1.add("üíå –í—ñ–¥–ø–æ–≤—ñ–¥—ñ");
        keyboard.add(row1);
        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚¨Ö –ù–∞–∑–∞–¥");
        keyboard.add(row3);
        markup.setKeyboard(keyboard);
        return SendMessage.builder()
                .chatId(chatId)
                .text("üìñ –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏:\n\n" +
                        "‚úâÔ∏è *–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É* ‚Äì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.\n" +
                        "üíå *–í—ñ–¥–ø–æ–≤—ñ–¥—ñ* ‚Äì –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ñ–≤.")
                .parseMode("Markdown")
                .replyMarkup(markup)
                .build();
    }

    private SendMessage createInvitesMenu(String chatId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è");
        row1.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è");
        row2.add("üìÑ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è");
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞");
        keyboard.add(row3);

        markup.setKeyboard(keyboard);
        return SendMessage.builder()
                .chatId(chatId)
                .text("üîó –ú–µ–Ω—é –∑–∞–ø—Ä–æ—à—É–≤–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å:")
                .replyMarkup(markup)
                .build();
    }

    private SendMessage createLogsMenu(String chatId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à—É–≤–∞–Ω—å");
        row1.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω—å");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        row2.add("üîé –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω–µ–π –≤—ñ–¥ –ø–æ–∫—É–ø—Ü—ñ–≤");
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞");
        keyboard.add(row3);

        markup.setKeyboard(keyboard);
        return SendMessage.builder()
                .chatId(chatId)
                .text("üìú –ú–µ–Ω—é –ª–æ–≥—É–≤–∞–Ω–Ω—è:")
                .replyMarkup(markup)
                .build();
    }

    private SendMessage createFeedbackMenu(String chatId, String userId, String feedbackText) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üì© –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—ñ–¥–≥—É–∫");
        row1.add("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–≥—É–∫");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫");
        row2.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é");
        keyboard.add(row2);

        markup.setKeyboard(keyboard);

        return SendMessage.builder()
                .chatId(chatId)
                .text("–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + userId + ":\n\n" + feedbackText + "\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
                .replyMarkup(markup)
                .build();
    }

    private void sendText(String chatId, String text) {
        int maxLength = 4000;
        try {
            for (int start = 0; start < text.length(); start += maxLength) {
                int end = Math.min(start + maxLength, text.length());
                SendMessage msg = new SendMessage(chatId, text.substring(start, end));
                msg.setParseMode("HTML"); // ‚úÖ –í–º–∏–∫–∞—î–º–æ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                execute(msg);
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(SendMessage msg) {
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private static String normalize(String s) {
        if (s == null) return "";
        return s.replaceAll("[\\u00A0\\s]+", " ").trim().toLowerCase();
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
    private void handleText(Long chatId, String text) throws TelegramApiException {
        List<String> categories = catalogSearcher.getCategories();

        if (categories.contains(text)) {
            currentCategory.put(chatId, text);
            currentSubcategory.remove(chatId);
            sendSubcategories(chatId, text);
            return;
        }

        if (currentCategory.containsKey(chatId)) {
            String cat = currentCategory.get(chatId);
            List<String> subcats = catalogSearcher.getSubcategories(cat);

            if (subcats.contains(text)) {
                currentSubcategory.put(chatId, text);
                productIndex.put(chatId, 0);
                sendProduct(chatId);
                return;
            }
        }

        sendText(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ üòÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –º–µ–Ω—é.");
    }

    // --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
    private void sendText(Long chatId, String text) {
        sendText(chatId.toString(), text);
    }

    private void sendMessage(Long chatId, String text, ReplyKeyboardMarkup markup) {
        sendMessage(chatId.toString(), text, markup);
    }

    private void sendMessage(String chatId, String text, ReplyKeyboardMarkup markup) {
        try {
            SendMessage msg = SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .replyMarkup(markup)
                    .build();
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // --- –ü–æ–∫–∞–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π ---
    private void sendSubcategories(Long chatId, String category) throws TelegramApiException {
        List<String> subcats = catalogSearcher.getSubcategories(category);

        ReplyKeyboardMarkup markup = ReplyKeyboardMarkup.builder()
                .resizeKeyboard(true)
                .keyboard(buildKeyboard(subcats, true)) // <-- —Ç–µ–ø–µ—Ä –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
                .build();

        sendMessage(chatId, "üìÇ –í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", markup);
    }

    // --- –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä—É ---
    private void sendProduct(Long chatId) throws TelegramApiException {
        String cat = currentCategory.get(chatId);
        String sub = currentSubcategory.get(chatId);
        int index = productIndex.getOrDefault(chatId, 0);

        List<Map<String, Object>> products = catalogSearcher.getProducts(cat, sub);
        if (products == null || products.isEmpty()) {
            sendText(chatId, "‚ùå –£ —Ü—ñ–π –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.");
            return;
        }

        if (index >= products.size()) index = 0;

        Map<String, Object> product = products.get(index);
        lastShownProduct.put(chatId, product); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä

        String name = product.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
        String price = product.getOrDefault("price", "N/A").toString();
        String unit = product.getOrDefault("unit", "—à—Ç").toString();
        String description = product.getOrDefault("description", "").toString();
        String photoPath = product.getOrDefault("photo", "").toString();
        String manufacturer = product.getOrDefault("manufacturer", "").toString();

        StringBuilder sb = new StringBuilder("üì¶ ").append(name)
                .append("\nüí∞ –¶—ñ–Ω–∞: ").append(price).append(" –≥—Ä–Ω –∑–∞ ").append(unit);
        if (!manufacturer.isEmpty()) sb.append("\nüè≠ –í–∏—Ä–æ–±–Ω–∏–∫: ").append(manufacturer);
        if (!description.isEmpty()) sb.append("\nüìñ ").append(description);

        KeyboardRow row = new KeyboardRow();
        row.add("‚û° –î–∞–ª—ñ");
        row.add("üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫");
        row.add("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—à–∏–∫");

        List<KeyboardRow> kb = new ArrayList<>();
        kb.add(row);
        kb.add(new KeyboardRow(List.of(new KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))));

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        markup.setKeyboard(kb);

        if (photoPath != null && !photoPath.isEmpty()) {
            String fileName = new java.io.File(photoPath).getName();
            sendPhotoFromResources(chatId.toString(), fileName, sb.toString(), markup);
        } else {
            sendText(chatId.toString(), sb.toString());
        }

        // –ó–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–∫–∞–∑—É
        index = (index + 1) % products.size();
        productIndex.put(chatId, index);
    }

    private void sendPhoto(String chatId, String fileName, String caption) {
        try {
            InputStream is = getClass().getClassLoader().getResourceAsStream("images/" + fileName);

            if (is == null) {
                System.out.println("[PHOTO] –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + fileName);
                sendText(chatId, "‚ùå –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);

            // –°—Ç–≤–æ—Ä—é—î–º–æ InputFile –∑ InputStream
            InputFile inputFile = new InputFile(is, fileName);
            photo.setPhoto(inputFile);

            photo.setCaption(caption);

            execute(photo);
            System.out.println("[PHOTO] –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: " + fileName);

        } catch (Exception e) {
            e.printStackTrace();
            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ.");
        }
    }

    private void createOrderAdminMenu(String chatId, Map<String, Object> order, Long userId) {
        StringBuilder sb = new StringBuilder();

        sb.append("üÜî User ID: ").append(userId).append("\n")
                .append("üî¢ –ö–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ").append(order.getOrDefault("orderCode", "-")).append("\n")
                .append("üì¶ –¢–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ").append(order.getOrDefault("deliveryType", "–ù–µ–≤—ñ–¥–æ–º–æ")).append("\n\n");

        String deliveryType = (String) order.get("deliveryType");
        if ("–°–∞–º–æ–≤–∏–≤—ñ–∑".equals(deliveryType)) {
            sb.append("üèô –ú—ñ—Å—Ç–æ: ").append(order.getOrDefault("city", "-")).append("\n");
        } else if ("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É".equals(deliveryType)) {
            sb.append("üè† –ê–¥—Ä–µ—Å–∞: ").append(order.getOrDefault("address", "-")).append("\n");
        } else if ("–ù–æ–≤–∞ –ø–æ—à—Ç–∞".equals(deliveryType)) {
            sb.append("üìÆ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü: ").append(order.getOrDefault("postOffice", "-")).append("\n");
        }

        sb.append("üë§ –ü.–Ü.: ").append(order.getOrDefault("fullName", "-")).append("\n")
                .append("üìû –¢–µ–ª–µ—Ñ–æ–Ω: ").append(order.getOrDefault("phone", "-")).append("\n")
                .append("üí≥ –ö–∞—Ä—Ç–∫–∞: ").append(order.getOrDefault("card", "-")).append("\n\n");

        // –í–∏–≤—ñ–¥ —Ç–æ–≤–∞—Ä—ñ–≤
        String itemsStr = (String) order.get("item");
        if (itemsStr != null && !itemsStr.isEmpty()) {
            String[] itemArr = itemsStr.split(";");
            int i = 1;
            for (String s : itemArr) {
                if (s.isBlank()) continue;
                String[] pair = s.split(":");
                String name = pair[0];
                double price = 0;
                try {
                    if (pair.length > 1) price = Double.parseDouble(pair[1]);
                } catch (Exception ignored) {}
                sb.append(i++).append(". üõí ").append(name).append(" ‚Äî ").append(price).append(" –≥—Ä–Ω\n");
            }
        }

        double total = 0.0;
        Object totalObj = order.get("total");
        if (totalObj instanceof Number) total = ((Number) totalObj).doubleValue();
        else if (totalObj != null) {
            try { total = Double.parseDouble(totalObj.toString()); } catch (Exception ignored) {}
        }
        sb.append("\nüí∞ –í—Å—å–æ–≥–æ: ").append(total).append(" –≥—Ä–Ω");

        // üîπ –ö–Ω–æ–ø–∫–∏
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏");
        row1.add("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏");
        row1.add("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚èÆÔ∏è –ù–∞–∑–∞–¥");
        row2.add("‚è≠Ô∏è –î–∞–ª—å—à–µ");
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–ü—Ä–æ–¥–∞–≤–µ—Ü—å –º–µ–Ω—é)");
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(sb.toString());
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É.");
        }
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤—ñ–¥–≥—É–∫—É
    private ReplyKeyboardMarkup buildFeedbackKeyboard() {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—ñ–¥–≥—É–∫");
        row1.add("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–≥—É–∫");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üßπ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫");
        row2.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
        keyboard.add(row2);

        markup.setKeyboard(keyboard);
        return markup;
    }

    // –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –≤—ñ–¥–≥—É–∫—É
    private SendMessage createFeedbackSubMenu(String chatId, Long targetUserId) {
        ReplyKeyboardMarkup markup = buildFeedbackKeyboard();

        // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–≥—É–∫ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        List<String> feedbacks = FeedbackManager.getAllFeedbacks().get(targetUserId);
        String feedbackText = (feedbacks != null && !feedbacks.isEmpty())
                ? feedbacks.get(feedbacks.size() - 1)
                : "‚ùå –í—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ–º–∞—î.";

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ–± –∑–Ω–∞—Ç–∏, –∫–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–¥–º—ñ–Ω
        adminReplyTarget.put(Long.valueOf(chatId), targetUserId);

        return SendMessage.builder()
                .chatId(chatId)
                .text("–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + targetUserId + ":\n\n" + feedbackText + "\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
                .replyMarkup(markup)
                .build();
    }

    private void showAdminOrder(Long adminId, String chatId) {
        try (Connection conn = DatabaseManager.getConnection()) {

            // –ë–µ—Ä–µ–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            String sql = "SELECT * FROM orders WHERE status != '–í–∏–¥–∞–ª–µ–Ω–æ' ORDER BY id ASC";
            List<Map<String, Object>> orders = new ArrayList<>();
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {

                while (rs.next()) {
                    Map<String, Object> order = new HashMap<>();
                    order.put("id", rs.getInt("id"));
                    order.put("orderCode", rs.getString("orderCode"));
                    order.put("userId", rs.getLong("userId"));
                    order.put("deliveryType", rs.getString("deliveryType"));
                    order.put("city", rs.getString("city"));
                    order.put("address", rs.getString("address"));
                    order.put("postOffice", rs.getString("postOffice"));
                    order.put("fullName", rs.getString("fullName"));
                    order.put("phone", rs.getString("phone"));
                    order.put("card", rs.getString("card"));
                    order.put("status", rs.getString("status"));
                    order.put("date", rs.getDate("date"));
                    order.put("item", rs.getString("item"));

                    Object totalObj = rs.getObject("total");
                    double total = 0;
                    if (totalObj instanceof Number) total = ((Number) totalObj).doubleValue();
                    else if (totalObj != null) {
                        try { total = Double.parseDouble(totalObj.toString()); } catch (Exception ignored) {}
                    }
                    order.put("total", total);

                    orders.add(order);
                }
            }

            if (orders.isEmpty()) {
                sendText(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.");
                return;
            }

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫–∏–π —ñ–Ω–¥–µ–∫—Å –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
            int idx = adminOrderIndex.getOrDefault(adminId, 0);
            if (idx >= orders.size()) idx = orders.size() - 1; // —â–æ–± –Ω–µ –≤–∏—Ö–æ–¥–∏–ª–æ –∑–∞ –º–µ–∂—ñ
            Map<String, Object> orderToShow = orders.get(idx);

            // –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—É
            createOrderAdminMenu(chatId, orderToShow, orderToShow.get("userId") instanceof Long ? (Long) orderToShow.get("userId") : 0L);

        } catch (SQLException e) {
            e.printStackTrace();
            sendText(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –±–∞–∑–∏.");
        }
    }

    private void sendSearchedProduct(Long chatId) throws TelegramApiException {
        List<Map<String, Object>> results = searchResults.get(chatId);
        int index = productIndex.getOrDefault(chatId, 0);

        if (results == null || results.isEmpty()) {
            sendText(chatId, "‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É.");
            return;
        }

        if (index >= results.size()) index = 0;
        Map<String, Object> product = results.get(index);
        lastShownProduct.put(chatId, product);

        String name = product.getOrDefault("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏").toString();
        String price = product.getOrDefault("price", "N/A").toString();
        String unit = product.getOrDefault("unit", "—à—Ç").toString();
        String description = product.getOrDefault("description", "").toString();
        String photoPath = product.getOrDefault("photo", "").toString();
        String category = product.getOrDefault("category", "").toString();
        String subcategory = product.getOrDefault("subcategory", "").toString();

        StringBuilder sb = new StringBuilder("üì¶ ").append(name)
                .append("\nüí∞ –¶—ñ–Ω–∞: ").append(price).append(" –≥—Ä–Ω –∑–∞ ").append(unit);
        if (!category.isEmpty() || !subcategory.isEmpty()) {
            sb.append("\nüìÇ ").append(category);
            if (!subcategory.isEmpty()) sb.append(" ‚Üí ").append(subcategory);
        }
        if (!description.isEmpty()) sb.append("\nüìñ ").append(description);

        KeyboardRow row = new KeyboardRow();
        row.add("‚û° –î–∞–ª—ñ");
        row.add("üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫");

        List<KeyboardRow> kb = new ArrayList<>();
        kb.add(row);
        kb.add(new KeyboardRow(List.of(new KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))));

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        markup.setKeyboard(kb);

        if (photoPath != null && !photoPath.isEmpty()) {
            String fileName = new java.io.File(photoPath).getName();
            sendPhotoFromResources(chatId.toString(), fileName, sb.toString(), markup);
        } else {
            sendText(chatId.toString(), sb.toString());
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä
        index = (index + 1) % results.size();
        productIndex.put(chatId, index);
    }



    private void handleUserFeedback(Long userId, String chatId, String text) {
        userStates.remove(userId);

        feedbacks.computeIfAbsent(userId, k -> new ArrayList<>()).add(text);
        sendText(chatId, "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!");

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º
        for (Long devId : DEVELOPERS) {
            sendText(devId.toString(), "üÜï –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + userId + ":\n\n" + text);
        }
    }

    private void handleCallback(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        String chatId = callbackQuery.getMessage().getChatId().toString();
        Long devId = callbackQuery.getFrom().getId();

        try {
            if (data.startsWith("reply:")) {
                Long userId = Long.parseLong(data.split(":")[1]);
                replyTargets.put(devId, userId);
                userStates.put(devId, "waiting_for_reply");
                sendText(chatId, "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + userId + ":");
            }

            else if (data.startsWith("save:")) {
                sendText(chatId, "‚úÖ –í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–ø–æ–∫–∏ –≤ –ø–∞–º‚Äô—è—Ç—ñ).");
            }

            else if (data.startsWith("delete:")) {
                String[] parts = data.split(":");
                Long userId = Long.parseLong(parts[1]);
                int hash = Integer.parseInt(parts[2]);

                List<String> list = feedbacks.get(userId);
                if (list != null) {
                    list.removeIf(f -> f.hashCode() == hash);
                    if (list.isEmpty()) feedbacks.remove(userId);
                }

                sendText(chatId, "üóëÔ∏è –í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + userId + " –≤–∏–¥–∞–ª–µ–Ω–æ.");
            }
        } catch (Exception e) {
            sendText(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥—ñ—ó.");
            e.printStackTrace();
        }
    }

    public void handleFeedbackState(Long userId, String chatId, String text, String state) throws TelegramApiException {
        switch (state) {
            case "waiting_for_feedback": // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –≤—ñ–¥–≥—É–∫
                FeedbackManager.addFeedback(userId, text);
                sendText(chatId, "‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!");
                userStates.remove(userId);
                break;

            case "writing_reply": // –∞–¥–º—ñ–Ω –ø–∏—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                Long targetUserId = adminReplyTarget.get(userId);
                if (targetUserId != null) {
                    sendText(targetUserId.toString(), "üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" + text);
                    sendText(chatId, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É " + targetUserId);
                } else {
                    sendText(chatId, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.");
                }
                userStates.remove(userId);
                adminReplyTarget.remove(userId);
                break;
        }
    }

    private void sendPhotoFromResources(String chatId, String resourceFileName, String caption, ReplyKeyboardMarkup markup) {
        try {
            // –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö —É src/main/resources, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "images/—Ñ–æ—Ç–æ.jpg"
            String resourcePath = "images/" + resourceFileName;
            InputStream is = getClass().getClassLoader().getResourceAsStream(resourcePath);

            if (is == null) {
                System.out.println("[PHOTO] –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ä–µ—Å—É—Ä—Å–∞—Ö: " + resourcePath);
                sendText(chatId, "‚ùå –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + resourceFileName);
                return;
            }

            InputFile inputFile = new InputFile(is, resourceFileName); // InputStream + –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É

            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(inputFile);
            photo.setCaption(caption);
            photo.setReplyMarkup(markup);

            execute(photo);
            System.out.println("[PHOTO] –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: " + resourceFileName);

            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ InputStream –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            is.close();

        } catch (Exception e) {
            e.printStackTrace();
            sendText(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ.");
        }
    }

    public void handleFeedbackCallback(Update update) throws TelegramApiException {
        String data = update.getCallbackQuery().getData();
        Long adminId = update.getCallbackQuery().getFrom().getId();
        String chatId = update.getCallbackQuery().getMessage().getChatId().toString();

        if (data.startsWith("reply_")) {
            Long targetUserId = Long.parseLong(data.split("_")[1]);
            adminReplyTarget.put(adminId, targetUserId); // Map<Long, Long>
            userStates.put(adminId, "writing_reply");
            sendText(chatId, "‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ " + targetUserId + ":");

        } else if (data.startsWith("save_")) {
            FeedbackManager.saveFeedbacks();
            sendText(chatId, "üíæ –í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ.");

        } else if (data.startsWith("delete_")) {
            Long targetUserId = Long.parseLong(data.split("_")[1]);
            FeedbackManager.removeLastFeedback(targetUserId);
            sendText(chatId, "üßπ –í—ñ–¥–≥—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.");
        }
    }

    private void notifyAllActiveUsersAboutHit() {
        for (Long userId : userStates.keySet()) {
            try {
                execute(SendMessage.builder()
                        .chatId(userId.toString())
                        .text("üåü –ù–æ–≤–∏–π –•—ñ—Ç –ø—Ä–æ–¥–∞–∂—É!")
                        .build());
            } catch (Exception e) {
                System.out.println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É " + userId);
            }
        }
    }
}